/*
Copyright AppsCode Inc. and Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "kubeops.dev/petset/apis/apps/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PetSetLister helps list PetSets.
// All objects returned here must be treated as read-only.
type PetSetLister interface {
	// List lists all PetSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PetSet, err error)
	// PetSets returns an object that can list and get PetSets.
	PetSets(namespace string) PetSetNamespaceLister
	PetSetListerExpansion
}

// petSetLister implements the PetSetLister interface.
type petSetLister struct {
	indexer cache.Indexer
}

// NewPetSetLister returns a new PetSetLister.
func NewPetSetLister(indexer cache.Indexer) PetSetLister {
	return &petSetLister{indexer: indexer}
}

// List lists all PetSets in the indexer.
func (s *petSetLister) List(selector labels.Selector) (ret []*v1.PetSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PetSet))
	})
	return ret, err
}

// PetSets returns an object that can list and get PetSets.
func (s *petSetLister) PetSets(namespace string) PetSetNamespaceLister {
	return petSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PetSetNamespaceLister helps list and get PetSets.
// All objects returned here must be treated as read-only.
type PetSetNamespaceLister interface {
	// List lists all PetSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PetSet, err error)
	// Get retrieves the PetSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.PetSet, error)
	PetSetNamespaceListerExpansion
}

// petSetNamespaceLister implements the PetSetNamespaceLister
// interface.
type petSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PetSets in the indexer for a given namespace.
func (s petSetNamespaceLister) List(selector labels.Selector) (ret []*v1.PetSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PetSet))
	})
	return ret, err
}

// Get retrieves the PetSet from the indexer for a given namespace and name.
func (s petSetNamespaceLister) Get(name string) (*v1.PetSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("petset"), name)
	}
	return obj.(*v1.PetSet), nil
}
