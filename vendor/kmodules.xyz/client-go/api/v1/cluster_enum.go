// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1

import (
	"fmt"
	"strings"
)

const (
	// ClusterModeProd is a ClusterMode of type prod.
	ClusterModeProd ClusterMode = "prod"
	// ClusterModeQa is a ClusterMode of type qa.
	ClusterModeQa ClusterMode = "qa"
	// ClusterModeStaging is a ClusterMode of type staging.
	ClusterModeStaging ClusterMode = "staging"
	// ClusterModeDev is a ClusterMode of type dev.
	ClusterModeDev ClusterMode = "dev"
)

var ErrInvalidClusterMode = fmt.Errorf("not a valid ClusterMode, try [%s]", strings.Join(_ClusterModeNames, ", "))

var _ClusterModeNames = []string{
	string(ClusterModeProd),
	string(ClusterModeQa),
	string(ClusterModeStaging),
	string(ClusterModeDev),
}

// ClusterModeNames returns a list of possible string values of ClusterMode.
func ClusterModeNames() []string {
	tmp := make([]string, len(_ClusterModeNames))
	copy(tmp, _ClusterModeNames)
	return tmp
}

// ClusterModeValues returns a list of the values for ClusterMode
func ClusterModeValues() []ClusterMode {
	return []ClusterMode{
		ClusterModeProd,
		ClusterModeQa,
		ClusterModeStaging,
		ClusterModeDev,
	}
}

// String implements the Stringer interface.
func (x ClusterMode) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ClusterMode) IsValid() bool {
	_, err := ParseClusterMode(string(x))
	return err == nil
}

var _ClusterModeValue = map[string]ClusterMode{
	"prod":    ClusterModeProd,
	"qa":      ClusterModeQa,
	"staging": ClusterModeStaging,
	"dev":     ClusterModeDev,
}

// ParseClusterMode attempts to convert a string to a ClusterMode.
func ParseClusterMode(name string) (ClusterMode, error) {
	if x, ok := _ClusterModeValue[name]; ok {
		return x, nil
	}
	return ClusterMode(""), fmt.Errorf("%s is %w", name, ErrInvalidClusterMode)
}

// MustParseClusterMode converts a string to a ClusterMode, and panics if is not valid.
func MustParseClusterMode(name string) ClusterMode {
	val, err := ParseClusterMode(name)
	if err != nil {
		panic(err)
	}
	return val
}
