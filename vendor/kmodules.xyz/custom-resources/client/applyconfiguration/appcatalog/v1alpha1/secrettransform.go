/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// SecretTransformApplyConfiguration represents an declarative configuration of the SecretTransform type for use
// with apply.
type SecretTransformApplyConfiguration struct {
	RenameKey   *RenameKeyTransformApplyConfiguration   `json:"renameKey,omitempty"`
	AddKey      *AddKeyTransformApplyConfiguration      `json:"addKey,omitempty"`
	AddKeysFrom *AddKeysFromTransformApplyConfiguration `json:"addKeysFrom,omitempty"`
	RemoveKey   *RemoveKeyTransformApplyConfiguration   `json:"removeKey,omitempty"`
}

// SecretTransformApplyConfiguration constructs an declarative configuration of the SecretTransform type for use with
// apply.
func SecretTransform() *SecretTransformApplyConfiguration {
	return &SecretTransformApplyConfiguration{}
}

// WithRenameKey sets the RenameKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RenameKey field is set to the value of the last call.
func (b *SecretTransformApplyConfiguration) WithRenameKey(value *RenameKeyTransformApplyConfiguration) *SecretTransformApplyConfiguration {
	b.RenameKey = value
	return b
}

// WithAddKey sets the AddKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AddKey field is set to the value of the last call.
func (b *SecretTransformApplyConfiguration) WithAddKey(value *AddKeyTransformApplyConfiguration) *SecretTransformApplyConfiguration {
	b.AddKey = value
	return b
}

// WithAddKeysFrom sets the AddKeysFrom field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AddKeysFrom field is set to the value of the last call.
func (b *SecretTransformApplyConfiguration) WithAddKeysFrom(value *AddKeysFromTransformApplyConfiguration) *SecretTransformApplyConfiguration {
	b.AddKeysFrom = value
	return b
}

// WithRemoveKey sets the RemoveKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RemoveKey field is set to the value of the last call.
func (b *SecretTransformApplyConfiguration) WithRemoveKey(value *RemoveKeyTransformApplyConfiguration) *SecretTransformApplyConfiguration {
	b.RemoveKey = value
	return b
}
