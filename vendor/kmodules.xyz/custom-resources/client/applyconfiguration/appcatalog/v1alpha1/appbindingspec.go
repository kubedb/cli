/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "kmodules.xyz/client-go/api/v1"
	v1alpha1 "kmodules.xyz/custom-resources/apis/appcatalog/v1alpha1"

	corev1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// AppBindingSpecApplyConfiguration represents an declarative configuration of the AppBindingSpec type for use
// with apply.
type AppBindingSpecApplyConfiguration struct {
	Type             *v1alpha1.AppType                   `json:"type,omitempty"`
	AppRef           *v1.TypedObjectReference            `json:"appRef,omitempty"`
	Version          *string                             `json:"version,omitempty"`
	ClientConfig     *ClientConfigApplyConfiguration     `json:"clientConfig,omitempty"`
	Secret           *corev1.LocalObjectReference        `json:"secret,omitempty"`
	SecretTransforms []SecretTransformApplyConfiguration `json:"secretTransforms,omitempty"`
	Parameters       *runtime.RawExtension               `json:"parameters,omitempty"`
	TLSSecret        *corev1.LocalObjectReference        `json:"tlsSecret,omitempty"`
}

// AppBindingSpecApplyConfiguration constructs an declarative configuration of the AppBindingSpec type for use with
// apply.
func AppBindingSpec() *AppBindingSpecApplyConfiguration {
	return &AppBindingSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *AppBindingSpecApplyConfiguration) WithType(value v1alpha1.AppType) *AppBindingSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithAppRef sets the AppRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AppRef field is set to the value of the last call.
func (b *AppBindingSpecApplyConfiguration) WithAppRef(value v1.TypedObjectReference) *AppBindingSpecApplyConfiguration {
	b.AppRef = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *AppBindingSpecApplyConfiguration) WithVersion(value string) *AppBindingSpecApplyConfiguration {
	b.Version = &value
	return b
}

// WithClientConfig sets the ClientConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientConfig field is set to the value of the last call.
func (b *AppBindingSpecApplyConfiguration) WithClientConfig(value *ClientConfigApplyConfiguration) *AppBindingSpecApplyConfiguration {
	b.ClientConfig = value
	return b
}

// WithSecret sets the Secret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Secret field is set to the value of the last call.
func (b *AppBindingSpecApplyConfiguration) WithSecret(value corev1.LocalObjectReference) *AppBindingSpecApplyConfiguration {
	b.Secret = &value
	return b
}

// WithSecretTransforms adds the given value to the SecretTransforms field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SecretTransforms field.
func (b *AppBindingSpecApplyConfiguration) WithSecretTransforms(values ...*SecretTransformApplyConfiguration) *AppBindingSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSecretTransforms")
		}
		b.SecretTransforms = append(b.SecretTransforms, *values[i])
	}
	return b
}

// WithParameters sets the Parameters field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Parameters field is set to the value of the last call.
func (b *AppBindingSpecApplyConfiguration) WithParameters(value runtime.RawExtension) *AppBindingSpecApplyConfiguration {
	b.Parameters = &value
	return b
}

// WithTLSSecret sets the TLSSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLSSecret field is set to the value of the last call.
func (b *AppBindingSpecApplyConfiguration) WithTLSSecret(value corev1.LocalObjectReference) *AppBindingSpecApplyConfiguration {
	b.TLSSecret = &value
	return b
}
