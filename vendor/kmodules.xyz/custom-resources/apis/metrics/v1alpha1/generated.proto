/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kmodules.xyz.custom_resources.apis.metrics.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Field contains the information of the field for which metric is collected.
// Example: To collect available replica count for a Deployment, Field's Path
// will be .statue.availableReplicas and the Type will be Integer.
//
// When some labels are collected with metric value 1 and
// the values are not from an array then Field can be skipped
// or will be ignored if specified. Otherwise Field must be specified.
message Field {
  // Path defines the json path of the object.
  // Example: For deployment spec replica count, the path will be .spec.replicas
  optional string path = 1;

  // Type defines the type of the value in the given Path
  // Type can be "Integer" for integer value like .spec.replicas,
  // "DateTime" for time stamp value like .metadata.creationTimestamp
  // "Array" for array field like .spec.containers
  // "String" for string field like .statue.phase (for pod status)
  // +kubebuilder:validation:Enum=Integer;DateTime;Array;String
  optional string type = 2;
}

// Label contains the information of a metric label.
// Given labels are always added in the metrics along with resource name and namespace.
// Resource's name and namespace are always added in the labels by default.
// No configuration is needed for name and namespace labels.
//
// Example: kube_pod_info{pod="<pod_name>", namespace="<pod_namespace>", host_ip="172.18.0.2", pod_ip="10.244.0.14", node="kind-control-plane"}  1
// In the example pod, namespace, host_ip, pod_ip, node are labels.
// pod(resource name) and namespace are default labels. No configurations is needed for those.
//
// To generate others labels, config should be given in the following way
//
// labels:
//   - key: host_ip
//     valuePath: .status.hostIP
//   - key: pod_ip
//     valuePath: .status.podIP
//   - key: node
//     valuePath: .spec.nodeName
//
// Either Value or ValuePath must be specified for a Label.
// If both is specified, ValuePath is ignored.
// Note that if a valuePath doesn't exist for a label key, the label will be ignored.
message Label {
  // Key defines the label key
  optional string key = 1;

  // Value defines the hard coded label value.
  // Example:
  // labels:
  //   - key: unit
  //     value: byte
  //   - key: environment
  //     value: production
  //
  // +optional
  optional string value = 2;

  // ValuePath defines the label value path.
  // Example: To add deployment's resource version as labels,
  // labels:
  //   - key: version
  //     valuePath: .metadata.resourceVersion
  //
  // +optional
  optional string valuePath = 3;
}

// MetricValue contains the configuration to obtain the value for a metric.
// Note that MetricValue should contain only one field: Value or ValueFromPath or ValueFromExpression.
// If multiple fields are assigned then only one field is considered and other fields are ignored.
// The priority rule is Value > ValueFromPath > ValueFromExpression.
message MetricValue {
  // Value contains the metric value. It is always equal to 1.
  // It is defined when some information of the object is
  // collected as labels but there is no specific metric value.
  //
  // Example: For metrics "kube_pod_info", there are some information
  // like host_ip, pod_ip, node name is collected as labels.
  // As there must be a metric value, metric value is kept as 1.
  // The metric will look like `kube_pod_info{host_ip="172.18.0.2", pod_ip="10.244.0.14", node="kind-control-plane" .....}  1`
  // +optional
  optional double value = 1;

  // ValueFromPath contains the field path of the manifest file of a object.
  // ValueFromPath is used when the metric value is coming from
  // any specific json path of the object.
  //
  // Example: For metrics "kube_deployment_spec_replicas",
  // the metricValue is coming from a specific path .spec.replicas
  // In this case, valueFromPath: .spec.replicas
  // Some example of json path: .metadata.observedGeneration, .spec.restartPolicy, .status.startTime
  //
  // Some example of json path
  // which is coming from an element of an array: .spec.containers[*].image, .status.containerStatuses[*].restartCount
  // +optional
  optional string valueFromPath = 2;

  // ValueFromExpression contains an expression for the metric value
  // expression can be a function as well. Parameters is used in the expression string
  //
  // Available expression evaluation functions are:
  //
  // int() returns 1 if the expression is true otherwise 0,
  // example: int(phase == 'Running')
  //
  // percentage(a, b) returns the value of (a * b%)
  // example: percentage(replicas, maxUnavailable)
  //
  // cpuCores() returns the cpu in unit core
  // example: cpuCores(cpu), for cpu value 150m, it will return 0.15
  //
  // bytes() returns the memory size in byte
  // example: bytes(memory), for memory value 1 ki, it will return 1024
  //
  // unix() returns the DateTime string into unix format.
  // example: unix(dateTime) will return the corresponding unix value for the given dateTime
  //
  // in above examples phase, replicas, maxUnavailable, cpu, memory, dateTime are Parameter's key
  // those values will come from corresponding Parameter's value
  //
  // Some expression evaluation functions are used for calculating resource requests and limits.
  // Those functions are stated here: https://github.com/kmodules/resource-metrics/blob/master/eval.go
  // +optional
  optional string valueFromExpression = 3;
}

// Metrics contains the configuration of a metric in prometheus style.
message Metrics {
  // Name defines the metrics name. Name should be in snake case.
  // Example: kube_deployment_spec_replicas
  optional string name = 1;

  // Help is used to describe the metrics.
  // Example: For kube_deployment_spec_replicas, help string can be "Number of desired pods for a deployment."
  optional string help = 2;

  // Type defines the metrics type.
  // For kubernetes based object, types can only be "gauge"
  // +kubebuilder:validation:Enum=gauge;
  optional string type = 3;

  // Field defines the metric value path of the manifest file and the type of that value
  // +optional
  optional Field field = 4;

  // Labels defines the metric labels as a key-value pair
  // +optional
  repeated Label labels = 5;

  // Params is list of parameters configuration used in expression evaluation
  // +optional
  repeated Parameter params = 6;

  // States handle metrics with label cardinality.
  // States specify the possible states for a label
  // and their corresponding MetricValue configuration.
  //
  // Metrics must contain either States or MetricValue.
  // If both are specified, MetricValue will be ignored.
  // +optional
  optional State states = 7;

  // MetricValue defines the configuration to obtain metric value.
  //
  // Metrics must contain either States or MetricValue.
  // If both are specified, MetricValue will be ignored.
  // +optional
  optional MetricValue metricValue = 8;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=metricsconfigurations,singular=metricsconfiguration,scope=Cluster,categories={metrics,appscode,all}
// +kubebuilder:printcolumn:name="APIVersion",type="string",JSONPath=".spec.targetRef.apiVersion"
// +kubebuilder:printcolumn:name="Kind",type="string",JSONPath=".spec.targetRef.kind"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MetricsConfiguration {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MetricsConfigurationSpec spec = 2;
}

// MetricsConfigurationList is a list of MetricsConfiguration
message MetricsConfigurationList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated MetricsConfiguration items = 2;
}

// MetricsConfigurationSpec is the spec of MetricsConfiguration object.
message MetricsConfigurationSpec {
  // TargetRef defines the object for which metrics will be collected
  optional TargetRef targetRef = 1;

  // List of Metrics configuration for the resource object defined in TargetRef
  repeated Metrics metrics = 2;
}

// Parameter contains the information of a parameter used in expression evaluation
// Parameter should contain an user defined key and corresponding Value or ValuePath.
// Either Value or ValuePath must be specified.
// If both are specified, ValuePath is ignored.
message Parameter {
  // Key defines the parameter's key
  optional string key = 1;

  // Value defines user defined parameter's value.
  // +optional
  optional string value = 2;

  // ValuePath defines the manifest field path for the parameter's value.
  // Example: To add deployment's spec replica count as parameter,
  // params:
  //   - key: replica
  //     valuePath: .spec.replicas
  // +optional
  optional string valuePath = 3;
}

// State contains the configuration for generating all the time series
// of a metric with label cardinality is greater than 1.
//
// Example: kube_pod_status_phase has a label called "phase" which value can be
// "Running", "Succeeded", "Failed", "Unknown", "Pending".
// So the cardinality of label phase is equal to 5. So kube_pod_status_phase will
// always generate five time series for a single pod.
//
// For a pod which .status.phase=Running, the time series are:
// kube_pod_status_phase{...,phase="Running",...} 1
// kube_pod_status_phase{...,phase="Succeeded",...} 0
// kube_pod_status_phase{...,phase="Failed",...} 0
// kube_pod_status_phase{...,phase="Unknown",...} 0
// kube_pod_status_phase{...,phase="Pending",...} 0
message State {
  // LabelKey defines an user defined label key of the label
  // which label cardinality is greater than one.
  // Example: For metric "kube_pod_status_phase", the LabelKey can be "phase"
  optional string labelKey = 1;

  // Values contains the list of state values.
  // The size of the list is always equal to the cardinality of that label.
  // Example: "kube_pod_statue_phase" metric has a label "phase"
  // which cardinality is equal to 5. So Values should have StateValues config for all of them.
  repeated StateValues values = 2;
}

// StateValues contains the information of a state value.
// StateValues is used to define state with all possible
// label values and corresponding MetricValue.
message StateValues {
  // LabelValue defines the value of the label.
  // Example: For labelKey "phase" (metric: kube_pod_status_phase path: .status.phase )
  // label value can be "Running", "Succeeded", "Failed", "Unknown" and "Pending"
  optional string labelValue = 1;

  // MetricValue defines the configuration of the metric value for the corresponding LabelValue
  optional MetricValue metricValue = 2;
}

// TargetRef contains the Object's apiVersion & kind to specify the target resource
message TargetRef {
  // Kind is a string value representing the REST resource this object represents.
  // In CamelCase.
  optional string kind = 1;

  // APIVersion defines the versioned schema of this representation of an object.
  optional string apiVersion = 2;
}

