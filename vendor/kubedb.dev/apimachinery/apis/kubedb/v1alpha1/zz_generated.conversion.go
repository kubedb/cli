//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	v1alpha2 "kubedb.dev/apimachinery/apis/kubedb/v1alpha2"

	types "gomodules.xyz/encoding/json/types"
	v1 "k8s.io/api/core/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
	apiv1 "kmodules.xyz/monitoring-agent-api/api/v1"
	apiv1alpha1 "kmodules.xyz/monitoring-agent-api/api/v1alpha1"
	offshootapiapiv1 "kmodules.xyz/offshoot-api/api/v1"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*Elasticsearch)(nil), (*v1alpha2.Elasticsearch)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Elasticsearch_To_v1alpha2_Elasticsearch(a.(*Elasticsearch), b.(*v1alpha2.Elasticsearch), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.Elasticsearch)(nil), (*Elasticsearch)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_Elasticsearch_To_v1alpha1_Elasticsearch(a.(*v1alpha2.Elasticsearch), b.(*Elasticsearch), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ElasticsearchList)(nil), (*v1alpha2.ElasticsearchList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ElasticsearchList_To_v1alpha2_ElasticsearchList(a.(*ElasticsearchList), b.(*v1alpha2.ElasticsearchList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.ElasticsearchList)(nil), (*ElasticsearchList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_ElasticsearchList_To_v1alpha1_ElasticsearchList(a.(*v1alpha2.ElasticsearchList), b.(*ElasticsearchList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Etcd)(nil), (*v1alpha2.Etcd)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Etcd_To_v1alpha2_Etcd(a.(*Etcd), b.(*v1alpha2.Etcd), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.Etcd)(nil), (*Etcd)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_Etcd_To_v1alpha1_Etcd(a.(*v1alpha2.Etcd), b.(*Etcd), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*EtcdList)(nil), (*v1alpha2.EtcdList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_EtcdList_To_v1alpha2_EtcdList(a.(*EtcdList), b.(*v1alpha2.EtcdList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.EtcdList)(nil), (*EtcdList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_EtcdList_To_v1alpha1_EtcdList(a.(*v1alpha2.EtcdList), b.(*EtcdList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MariaDB)(nil), (*v1alpha2.MariaDB)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MariaDB_To_v1alpha2_MariaDB(a.(*MariaDB), b.(*v1alpha2.MariaDB), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MariaDB)(nil), (*MariaDB)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MariaDB_To_v1alpha1_MariaDB(a.(*v1alpha2.MariaDB), b.(*MariaDB), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MariaDBList)(nil), (*v1alpha2.MariaDBList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MariaDBList_To_v1alpha2_MariaDBList(a.(*MariaDBList), b.(*v1alpha2.MariaDBList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MariaDBList)(nil), (*MariaDBList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MariaDBList_To_v1alpha1_MariaDBList(a.(*v1alpha2.MariaDBList), b.(*MariaDBList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MemberSecret)(nil), (*v1alpha2.MemberSecret)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MemberSecret_To_v1alpha2_MemberSecret(a.(*MemberSecret), b.(*v1alpha2.MemberSecret), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MemberSecret)(nil), (*MemberSecret)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MemberSecret_To_v1alpha1_MemberSecret(a.(*v1alpha2.MemberSecret), b.(*MemberSecret), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Memcached)(nil), (*v1alpha2.Memcached)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Memcached_To_v1alpha2_Memcached(a.(*Memcached), b.(*v1alpha2.Memcached), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.Memcached)(nil), (*Memcached)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_Memcached_To_v1alpha1_Memcached(a.(*v1alpha2.Memcached), b.(*Memcached), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MemcachedList)(nil), (*v1alpha2.MemcachedList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MemcachedList_To_v1alpha2_MemcachedList(a.(*MemcachedList), b.(*v1alpha2.MemcachedList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MemcachedList)(nil), (*MemcachedList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MemcachedList_To_v1alpha1_MemcachedList(a.(*v1alpha2.MemcachedList), b.(*MemcachedList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MongoDB)(nil), (*v1alpha2.MongoDB)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MongoDB_To_v1alpha2_MongoDB(a.(*MongoDB), b.(*v1alpha2.MongoDB), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MongoDB)(nil), (*MongoDB)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MongoDB_To_v1alpha1_MongoDB(a.(*v1alpha2.MongoDB), b.(*MongoDB), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MongoDBConfigNode)(nil), (*v1alpha2.MongoDBConfigNode)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MongoDBConfigNode_To_v1alpha2_MongoDBConfigNode(a.(*MongoDBConfigNode), b.(*v1alpha2.MongoDBConfigNode), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MongoDBConfigNode)(nil), (*MongoDBConfigNode)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MongoDBConfigNode_To_v1alpha1_MongoDBConfigNode(a.(*v1alpha2.MongoDBConfigNode), b.(*MongoDBConfigNode), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MongoDBList)(nil), (*v1alpha2.MongoDBList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MongoDBList_To_v1alpha2_MongoDBList(a.(*MongoDBList), b.(*v1alpha2.MongoDBList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MongoDBList)(nil), (*MongoDBList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MongoDBList_To_v1alpha1_MongoDBList(a.(*v1alpha2.MongoDBList), b.(*MongoDBList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MongoDBMongosNode)(nil), (*MongoDBMongosNode)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MongoDBMongosNode_To_v1alpha1_MongoDBMongosNode(a.(*v1alpha2.MongoDBMongosNode), b.(*MongoDBMongosNode), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MongoDBReplicaSet)(nil), (*MongoDBReplicaSet)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MongoDBReplicaSet_To_v1alpha1_MongoDBReplicaSet(a.(*v1alpha2.MongoDBReplicaSet), b.(*MongoDBReplicaSet), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MongoDBShardNode)(nil), (*v1alpha2.MongoDBShardNode)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MongoDBShardNode_To_v1alpha2_MongoDBShardNode(a.(*MongoDBShardNode), b.(*v1alpha2.MongoDBShardNode), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MongoDBShardNode)(nil), (*MongoDBShardNode)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MongoDBShardNode_To_v1alpha1_MongoDBShardNode(a.(*v1alpha2.MongoDBShardNode), b.(*MongoDBShardNode), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MongoDBShardingTopology)(nil), (*v1alpha2.MongoDBShardingTopology)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MongoDBShardingTopology_To_v1alpha2_MongoDBShardingTopology(a.(*MongoDBShardingTopology), b.(*v1alpha2.MongoDBShardingTopology), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MongoDBShardingTopology)(nil), (*MongoDBShardingTopology)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MongoDBShardingTopology_To_v1alpha1_MongoDBShardingTopology(a.(*v1alpha2.MongoDBShardingTopology), b.(*MongoDBShardingTopology), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MySQL)(nil), (*v1alpha2.MySQL)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MySQL_To_v1alpha2_MySQL(a.(*MySQL), b.(*v1alpha2.MySQL), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MySQL)(nil), (*MySQL)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MySQL_To_v1alpha1_MySQL(a.(*v1alpha2.MySQL), b.(*MySQL), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MySQLClusterTopology)(nil), (*v1alpha2.MySQLClusterTopology)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MySQLClusterTopology_To_v1alpha2_MySQLClusterTopology(a.(*MySQLClusterTopology), b.(*v1alpha2.MySQLClusterTopology), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MySQLClusterTopology)(nil), (*MySQLClusterTopology)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MySQLClusterTopology_To_v1alpha1_MySQLClusterTopology(a.(*v1alpha2.MySQLClusterTopology), b.(*MySQLClusterTopology), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MySQLGroupSpec)(nil), (*MySQLGroupSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MySQLGroupSpec_To_v1alpha1_MySQLGroupSpec(a.(*v1alpha2.MySQLGroupSpec), b.(*MySQLGroupSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*MySQLList)(nil), (*v1alpha2.MySQLList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MySQLList_To_v1alpha2_MySQLList(a.(*MySQLList), b.(*v1alpha2.MySQLList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.MySQLList)(nil), (*MySQLList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MySQLList_To_v1alpha1_MySQLList(a.(*v1alpha2.MySQLList), b.(*MySQLList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*PerconaXtraDB)(nil), (*v1alpha2.PerconaXtraDB)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PerconaXtraDB_To_v1alpha2_PerconaXtraDB(a.(*PerconaXtraDB), b.(*v1alpha2.PerconaXtraDB), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.PerconaXtraDB)(nil), (*PerconaXtraDB)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_PerconaXtraDB_To_v1alpha1_PerconaXtraDB(a.(*v1alpha2.PerconaXtraDB), b.(*PerconaXtraDB), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*PerconaXtraDBList)(nil), (*v1alpha2.PerconaXtraDBList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PerconaXtraDBList_To_v1alpha2_PerconaXtraDBList(a.(*PerconaXtraDBList), b.(*v1alpha2.PerconaXtraDBList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.PerconaXtraDBList)(nil), (*PerconaXtraDBList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_PerconaXtraDBList_To_v1alpha1_PerconaXtraDBList(a.(*v1alpha2.PerconaXtraDBList), b.(*PerconaXtraDBList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Postgres)(nil), (*v1alpha2.Postgres)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Postgres_To_v1alpha2_Postgres(a.(*Postgres), b.(*v1alpha2.Postgres), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.Postgres)(nil), (*Postgres)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_Postgres_To_v1alpha1_Postgres(a.(*v1alpha2.Postgres), b.(*Postgres), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*PostgresList)(nil), (*v1alpha2.PostgresList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PostgresList_To_v1alpha2_PostgresList(a.(*PostgresList), b.(*v1alpha2.PostgresList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.PostgresList)(nil), (*PostgresList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_PostgresList_To_v1alpha1_PostgresList(a.(*v1alpha2.PostgresList), b.(*PostgresList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*RecoveryTarget)(nil), (*v1alpha2.RecoveryTarget)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_RecoveryTarget_To_v1alpha2_RecoveryTarget(a.(*RecoveryTarget), b.(*v1alpha2.RecoveryTarget), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.RecoveryTarget)(nil), (*RecoveryTarget)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_RecoveryTarget_To_v1alpha1_RecoveryTarget(a.(*v1alpha2.RecoveryTarget), b.(*RecoveryTarget), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Redis)(nil), (*v1alpha2.Redis)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Redis_To_v1alpha2_Redis(a.(*Redis), b.(*v1alpha2.Redis), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.Redis)(nil), (*Redis)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_Redis_To_v1alpha1_Redis(a.(*v1alpha2.Redis), b.(*Redis), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*RedisClusterSpec)(nil), (*v1alpha2.RedisClusterSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_RedisClusterSpec_To_v1alpha2_RedisClusterSpec(a.(*RedisClusterSpec), b.(*v1alpha2.RedisClusterSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.RedisClusterSpec)(nil), (*RedisClusterSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_RedisClusterSpec_To_v1alpha1_RedisClusterSpec(a.(*v1alpha2.RedisClusterSpec), b.(*RedisClusterSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*RedisList)(nil), (*v1alpha2.RedisList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_RedisList_To_v1alpha2_RedisList(a.(*RedisList), b.(*v1alpha2.RedisList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.RedisList)(nil), (*RedisList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_RedisList_To_v1alpha1_RedisList(a.(*v1alpha2.RedisList), b.(*RedisList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ScriptSourceSpec)(nil), (*v1alpha2.ScriptSourceSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ScriptSourceSpec_To_v1alpha2_ScriptSourceSpec(a.(*ScriptSourceSpec), b.(*v1alpha2.ScriptSourceSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.ScriptSourceSpec)(nil), (*ScriptSourceSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_ScriptSourceSpec_To_v1alpha1_ScriptSourceSpec(a.(*v1alpha2.ScriptSourceSpec), b.(*ScriptSourceSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*TLSPolicy)(nil), (*v1alpha2.TLSPolicy)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_TLSPolicy_To_v1alpha2_TLSPolicy(a.(*TLSPolicy), b.(*v1alpha2.TLSPolicy), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.TLSPolicy)(nil), (*TLSPolicy)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_TLSPolicy_To_v1alpha1_TLSPolicy(a.(*v1alpha2.TLSPolicy), b.(*TLSPolicy), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*int64)(nil), (*types.IntHash)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_int64_To_types_IntHash(a.(*int64), b.(*types.IntHash), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*types.IntHash)(nil), (*int64)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_types_IntHash_To_int64(a.(*types.IntHash), b.(*int64), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*ElasticsearchClusterTopology)(nil), (*v1alpha2.ElasticsearchClusterTopology)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ElasticsearchClusterTopology_To_v1alpha2_ElasticsearchClusterTopology(a.(*ElasticsearchClusterTopology), b.(*v1alpha2.ElasticsearchClusterTopology), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*ElasticsearchNode)(nil), (*v1alpha2.ElasticsearchNode)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ElasticsearchNode_To_v1alpha2_ElasticsearchNode(a.(*ElasticsearchNode), b.(*v1alpha2.ElasticsearchNode), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*ElasticsearchSpec)(nil), (*v1alpha2.ElasticsearchSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ElasticsearchSpec_To_v1alpha2_ElasticsearchSpec(a.(*ElasticsearchSpec), b.(*v1alpha2.ElasticsearchSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*ElasticsearchStatus)(nil), (*v1alpha2.ElasticsearchStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ElasticsearchStatus_To_v1alpha2_ElasticsearchStatus(a.(*ElasticsearchStatus), b.(*v1alpha2.ElasticsearchStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*EtcdSpec)(nil), (*v1alpha2.EtcdSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_EtcdSpec_To_v1alpha2_EtcdSpec(a.(*EtcdSpec), b.(*v1alpha2.EtcdSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*EtcdStatus)(nil), (*v1alpha2.EtcdStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_EtcdStatus_To_v1alpha2_EtcdStatus(a.(*EtcdStatus), b.(*v1alpha2.EtcdStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*InitSpec)(nil), (*v1alpha2.InitSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_InitSpec_To_v1alpha2_InitSpec(a.(*InitSpec), b.(*v1alpha2.InitSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*LeaderElectionConfig)(nil), (*v1alpha2.PostgreLeaderElectionConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_LeaderElectionConfig_To_v1alpha2_PostgreLeaderElectionConfig(a.(*LeaderElectionConfig), b.(*v1alpha2.PostgreLeaderElectionConfig), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MariaDBSpec)(nil), (*v1alpha2.MariaDBSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MariaDBSpec_To_v1alpha2_MariaDBSpec(a.(*MariaDBSpec), b.(*v1alpha2.MariaDBSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MariaDBStatus)(nil), (*v1alpha2.MariaDBStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MariaDBStatus_To_v1alpha2_MariaDBStatus(a.(*MariaDBStatus), b.(*v1alpha2.MariaDBStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MemcachedSpec)(nil), (*v1alpha2.MemcachedSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MemcachedSpec_To_v1alpha2_MemcachedSpec(a.(*MemcachedSpec), b.(*v1alpha2.MemcachedSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MemcachedStatus)(nil), (*v1alpha2.MemcachedStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MemcachedStatus_To_v1alpha2_MemcachedStatus(a.(*MemcachedStatus), b.(*v1alpha2.MemcachedStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MongoDBMongosNode)(nil), (*v1alpha2.MongoDBMongosNode)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MongoDBMongosNode_To_v1alpha2_MongoDBMongosNode(a.(*MongoDBMongosNode), b.(*v1alpha2.MongoDBMongosNode), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MongoDBNode)(nil), (*v1alpha2.MongoDBNode)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MongoDBNode_To_v1alpha2_MongoDBNode(a.(*MongoDBNode), b.(*v1alpha2.MongoDBNode), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MongoDBReplicaSet)(nil), (*v1alpha2.MongoDBReplicaSet)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MongoDBReplicaSet_To_v1alpha2_MongoDBReplicaSet(a.(*MongoDBReplicaSet), b.(*v1alpha2.MongoDBReplicaSet), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MongoDBSpec)(nil), (*v1alpha2.MongoDBSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MongoDBSpec_To_v1alpha2_MongoDBSpec(a.(*MongoDBSpec), b.(*v1alpha2.MongoDBSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MongoDBStatus)(nil), (*v1alpha2.MongoDBStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MongoDBStatus_To_v1alpha2_MongoDBStatus(a.(*MongoDBStatus), b.(*v1alpha2.MongoDBStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MySQLGroupSpec)(nil), (*v1alpha2.MySQLGroupSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MySQLGroupSpec_To_v1alpha2_MySQLGroupSpec(a.(*MySQLGroupSpec), b.(*v1alpha2.MySQLGroupSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MySQLSpec)(nil), (*v1alpha2.MySQLSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MySQLSpec_To_v1alpha2_MySQLSpec(a.(*MySQLSpec), b.(*v1alpha2.MySQLSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MySQLStatus)(nil), (*v1alpha2.MySQLStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MySQLStatus_To_v1alpha2_MySQLStatus(a.(*MySQLStatus), b.(*v1alpha2.MySQLStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*PerconaXtraDBSpec)(nil), (*v1alpha2.PerconaXtraDBSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PerconaXtraDBSpec_To_v1alpha2_PerconaXtraDBSpec(a.(*PerconaXtraDBSpec), b.(*v1alpha2.PerconaXtraDBSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*PerconaXtraDBStatus)(nil), (*v1alpha2.PerconaXtraDBStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PerconaXtraDBStatus_To_v1alpha2_PerconaXtraDBStatus(a.(*PerconaXtraDBStatus), b.(*v1alpha2.PerconaXtraDBStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*PostgresSpec)(nil), (*v1alpha2.PostgresSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PostgresSpec_To_v1alpha2_PostgresSpec(a.(*PostgresSpec), b.(*v1alpha2.PostgresSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*PostgresStatus)(nil), (*v1alpha2.PostgresStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_PostgresStatus_To_v1alpha2_PostgresStatus(a.(*PostgresStatus), b.(*v1alpha2.PostgresStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*RedisSpec)(nil), (*v1alpha2.RedisSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_RedisSpec_To_v1alpha2_RedisSpec(a.(*RedisSpec), b.(*v1alpha2.RedisSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*RedisStatus)(nil), (*v1alpha2.RedisStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_RedisStatus_To_v1alpha2_RedisStatus(a.(*RedisStatus), b.(*v1alpha2.RedisStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.ElasticsearchClusterTopology)(nil), (*ElasticsearchClusterTopology)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_ElasticsearchClusterTopology_To_v1alpha1_ElasticsearchClusterTopology(a.(*v1alpha2.ElasticsearchClusterTopology), b.(*ElasticsearchClusterTopology), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.ElasticsearchNode)(nil), (*ElasticsearchNode)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_ElasticsearchNode_To_v1alpha1_ElasticsearchNode(a.(*v1alpha2.ElasticsearchNode), b.(*ElasticsearchNode), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.ElasticsearchSpec)(nil), (*ElasticsearchSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_ElasticsearchSpec_To_v1alpha1_ElasticsearchSpec(a.(*v1alpha2.ElasticsearchSpec), b.(*ElasticsearchSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.ElasticsearchStatus)(nil), (*ElasticsearchStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_ElasticsearchStatus_To_v1alpha1_ElasticsearchStatus(a.(*v1alpha2.ElasticsearchStatus), b.(*ElasticsearchStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.EtcdSpec)(nil), (*EtcdSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_EtcdSpec_To_v1alpha1_EtcdSpec(a.(*v1alpha2.EtcdSpec), b.(*EtcdSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.EtcdStatus)(nil), (*EtcdStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_EtcdStatus_To_v1alpha1_EtcdStatus(a.(*v1alpha2.EtcdStatus), b.(*EtcdStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.InitSpec)(nil), (*InitSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_InitSpec_To_v1alpha1_InitSpec(a.(*v1alpha2.InitSpec), b.(*InitSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.MariaDBSpec)(nil), (*MariaDBSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MariaDBSpec_To_v1alpha1_MariaDBSpec(a.(*v1alpha2.MariaDBSpec), b.(*MariaDBSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.MariaDBStatus)(nil), (*MariaDBStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MariaDBStatus_To_v1alpha1_MariaDBStatus(a.(*v1alpha2.MariaDBStatus), b.(*MariaDBStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.MemcachedSpec)(nil), (*MemcachedSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MemcachedSpec_To_v1alpha1_MemcachedSpec(a.(*v1alpha2.MemcachedSpec), b.(*MemcachedSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.MemcachedStatus)(nil), (*MemcachedStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MemcachedStatus_To_v1alpha1_MemcachedStatus(a.(*v1alpha2.MemcachedStatus), b.(*MemcachedStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.MongoDBNode)(nil), (*MongoDBNode)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MongoDBNode_To_v1alpha1_MongoDBNode(a.(*v1alpha2.MongoDBNode), b.(*MongoDBNode), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.MongoDBSpec)(nil), (*MongoDBSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MongoDBSpec_To_v1alpha1_MongoDBSpec(a.(*v1alpha2.MongoDBSpec), b.(*MongoDBSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.MongoDBStatus)(nil), (*MongoDBStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MongoDBStatus_To_v1alpha1_MongoDBStatus(a.(*v1alpha2.MongoDBStatus), b.(*MongoDBStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.MySQLSpec)(nil), (*MySQLSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MySQLSpec_To_v1alpha1_MySQLSpec(a.(*v1alpha2.MySQLSpec), b.(*MySQLSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.MySQLStatus)(nil), (*MySQLStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_MySQLStatus_To_v1alpha1_MySQLStatus(a.(*v1alpha2.MySQLStatus), b.(*MySQLStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.PerconaXtraDBSpec)(nil), (*PerconaXtraDBSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_PerconaXtraDBSpec_To_v1alpha1_PerconaXtraDBSpec(a.(*v1alpha2.PerconaXtraDBSpec), b.(*PerconaXtraDBSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.PerconaXtraDBStatus)(nil), (*PerconaXtraDBStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_PerconaXtraDBStatus_To_v1alpha1_PerconaXtraDBStatus(a.(*v1alpha2.PerconaXtraDBStatus), b.(*PerconaXtraDBStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.PostgreLeaderElectionConfig)(nil), (*LeaderElectionConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_PostgreLeaderElectionConfig_To_v1alpha1_LeaderElectionConfig(a.(*v1alpha2.PostgreLeaderElectionConfig), b.(*LeaderElectionConfig), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.PostgresSpec)(nil), (*PostgresSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_PostgresSpec_To_v1alpha1_PostgresSpec(a.(*v1alpha2.PostgresSpec), b.(*PostgresSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.PostgresStatus)(nil), (*PostgresStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_PostgresStatus_To_v1alpha1_PostgresStatus(a.(*v1alpha2.PostgresStatus), b.(*PostgresStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.RedisSpec)(nil), (*RedisSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_RedisSpec_To_v1alpha1_RedisSpec(a.(*v1alpha2.RedisSpec), b.(*RedisSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.RedisStatus)(nil), (*RedisStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_RedisStatus_To_v1alpha1_RedisStatus(a.(*v1alpha2.RedisStatus), b.(*RedisStatus), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_Elasticsearch_To_v1alpha2_Elasticsearch(in *Elasticsearch, out *v1alpha2.Elasticsearch, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_ElasticsearchSpec_To_v1alpha2_ElasticsearchSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_ElasticsearchStatus_To_v1alpha2_ElasticsearchStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_Elasticsearch_To_v1alpha2_Elasticsearch is an autogenerated conversion function.
func Convert_v1alpha1_Elasticsearch_To_v1alpha2_Elasticsearch(in *Elasticsearch, out *v1alpha2.Elasticsearch, s conversion.Scope) error {
	return autoConvert_v1alpha1_Elasticsearch_To_v1alpha2_Elasticsearch(in, out, s)
}

func autoConvert_v1alpha2_Elasticsearch_To_v1alpha1_Elasticsearch(in *v1alpha2.Elasticsearch, out *Elasticsearch, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_ElasticsearchSpec_To_v1alpha1_ElasticsearchSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_ElasticsearchStatus_To_v1alpha1_ElasticsearchStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_Elasticsearch_To_v1alpha1_Elasticsearch is an autogenerated conversion function.
func Convert_v1alpha2_Elasticsearch_To_v1alpha1_Elasticsearch(in *v1alpha2.Elasticsearch, out *Elasticsearch, s conversion.Scope) error {
	return autoConvert_v1alpha2_Elasticsearch_To_v1alpha1_Elasticsearch(in, out, s)
}

func autoConvert_v1alpha1_ElasticsearchClusterTopology_To_v1alpha2_ElasticsearchClusterTopology(in *ElasticsearchClusterTopology, out *v1alpha2.ElasticsearchClusterTopology, s conversion.Scope) error {
	if err := Convert_v1alpha1_ElasticsearchNode_To_v1alpha2_ElasticsearchNode(&in.Master, &out.Master, s); err != nil {
		return err
	}
	// WARNING: in.Data requires manual conversion: inconvertible types (kubedb.dev/apimachinery/apis/kubedb/v1alpha1.ElasticsearchNode vs *kubedb.dev/apimachinery/apis/kubedb/v1alpha2.ElasticsearchNode)
	// WARNING: in.Client requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha2_ElasticsearchClusterTopology_To_v1alpha1_ElasticsearchClusterTopology(in *v1alpha2.ElasticsearchClusterTopology, out *ElasticsearchClusterTopology, s conversion.Scope) error {
	if err := Convert_v1alpha2_ElasticsearchNode_To_v1alpha1_ElasticsearchNode(&in.Master, &out.Master, s); err != nil {
		return err
	}
	// WARNING: in.Ingest requires manual conversion: does not exist in peer-type
	// WARNING: in.Data requires manual conversion: inconvertible types (*kubedb.dev/apimachinery/apis/kubedb/v1alpha2.ElasticsearchNode vs kubedb.dev/apimachinery/apis/kubedb/v1alpha1.ElasticsearchNode)
	// WARNING: in.DataContent requires manual conversion: does not exist in peer-type
	// WARNING: in.DataHot requires manual conversion: does not exist in peer-type
	// WARNING: in.DataWarm requires manual conversion: does not exist in peer-type
	// WARNING: in.DataCold requires manual conversion: does not exist in peer-type
	// WARNING: in.DataFrozen requires manual conversion: does not exist in peer-type
	// WARNING: in.ML requires manual conversion: does not exist in peer-type
	// WARNING: in.Transform requires manual conversion: does not exist in peer-type
	// WARNING: in.Coordinating requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_ElasticsearchList_To_v1alpha2_ElasticsearchList(in *ElasticsearchList, out *v1alpha2.ElasticsearchList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1alpha2.Elasticsearch, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Elasticsearch_To_v1alpha2_Elasticsearch(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_ElasticsearchList_To_v1alpha2_ElasticsearchList is an autogenerated conversion function.
func Convert_v1alpha1_ElasticsearchList_To_v1alpha2_ElasticsearchList(in *ElasticsearchList, out *v1alpha2.ElasticsearchList, s conversion.Scope) error {
	return autoConvert_v1alpha1_ElasticsearchList_To_v1alpha2_ElasticsearchList(in, out, s)
}

func autoConvert_v1alpha2_ElasticsearchList_To_v1alpha1_ElasticsearchList(in *v1alpha2.ElasticsearchList, out *ElasticsearchList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Elasticsearch, len(*in))
		for i := range *in {
			if err := Convert_v1alpha2_Elasticsearch_To_v1alpha1_Elasticsearch(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha2_ElasticsearchList_To_v1alpha1_ElasticsearchList is an autogenerated conversion function.
func Convert_v1alpha2_ElasticsearchList_To_v1alpha1_ElasticsearchList(in *v1alpha2.ElasticsearchList, out *ElasticsearchList, s conversion.Scope) error {
	return autoConvert_v1alpha2_ElasticsearchList_To_v1alpha1_ElasticsearchList(in, out, s)
}

func autoConvert_v1alpha1_ElasticsearchNode_To_v1alpha2_ElasticsearchNode(in *ElasticsearchNode, out *v1alpha2.ElasticsearchNode, s conversion.Scope) error {
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	// WARNING: in.Prefix requires manual conversion: does not exist in peer-type
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	out.Resources = in.Resources
	out.MaxUnavailable = (*intstr.IntOrString)(unsafe.Pointer(in.MaxUnavailable))
	return nil
}

func autoConvert_v1alpha2_ElasticsearchNode_To_v1alpha1_ElasticsearchNode(in *v1alpha2.ElasticsearchNode, out *ElasticsearchNode, s conversion.Scope) error {
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	// WARNING: in.Suffix requires manual conversion: does not exist in peer-type
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	out.Resources = in.Resources
	out.MaxUnavailable = (*intstr.IntOrString)(unsafe.Pointer(in.MaxUnavailable))
	return nil
}

func autoConvert_v1alpha1_ElasticsearchSpec_To_v1alpha2_ElasticsearchSpec(in *ElasticsearchSpec, out *v1alpha2.ElasticsearchSpec, s conversion.Scope) error {
	out.Version = string(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = new(v1alpha2.ElasticsearchClusterTopology)
		if err := Convert_v1alpha1_ElasticsearchClusterTopology_To_v1alpha2_ElasticsearchClusterTopology(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Topology = nil
	}
	out.EnableSSL = in.EnableSSL
	// WARNING: in.CertificateSecret requires manual conversion: does not exist in peer-type
	// WARNING: in.AuthPlugin requires manual conversion: does not exist in peer-type
	// WARNING: in.DatabaseSecret requires manual conversion: does not exist in peer-type
	out.StorageType = v1alpha2.StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(v1alpha2.InitSpec)
		if err := Convert_v1alpha1_InitSpec_To_v1alpha2_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	// WARNING: in.BackupSchedule requires manual conversion: does not exist in peer-type
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1.AgentSpec)
		if err := apiv1alpha1.Convert_v1alpha1_AgentSpec_To_v1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSource requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplate requires manual conversion: does not exist in peer-type
	out.MaxUnavailable = (*intstr.IntOrString)(unsafe.Pointer(in.MaxUnavailable))
	// WARNING: in.UpdateStrategy requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = v1alpha2.TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha2_ElasticsearchSpec_To_v1alpha1_ElasticsearchSpec(in *v1alpha2.ElasticsearchSpec, out *ElasticsearchSpec, s conversion.Scope) error {
	out.Version = types.StrYo(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = new(ElasticsearchClusterTopology)
		if err := Convert_v1alpha2_ElasticsearchClusterTopology_To_v1alpha1_ElasticsearchClusterTopology(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Topology = nil
	}
	out.EnableSSL = in.EnableSSL
	// WARNING: in.DisableSecurity requires manual conversion: does not exist in peer-type
	// WARNING: in.AuthSecret requires manual conversion: does not exist in peer-type
	out.StorageType = StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(InitSpec)
		if err := Convert_v1alpha2_InitSpec_To_v1alpha1_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1alpha1.AgentSpec)
		if err := apiv1alpha1.Convert_v1_AgentSpec_To_v1alpha1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSecret requires manual conversion: does not exist in peer-type
	// WARNING: in.SecureConfigSecret requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplates requires manual conversion: does not exist in peer-type
	out.MaxUnavailable = (*intstr.IntOrString)(unsafe.Pointer(in.MaxUnavailable))
	// WARNING: in.TLS requires manual conversion: does not exist in peer-type
	// WARNING: in.InternalUsers requires manual conversion: does not exist in peer-type
	// WARNING: in.RolesMapping requires manual conversion: does not exist in peer-type
	// WARNING: in.Halted requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = TerminationPolicy(in.TerminationPolicy)
	// WARNING: in.KernelSettings requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_ElasticsearchStatus_To_v1alpha2_ElasticsearchStatus(in *ElasticsearchStatus, out *v1alpha2.ElasticsearchStatus, s conversion.Scope) error {
	out.Phase = v1alpha2.DatabasePhase(in.Phase)
	// WARNING: in.Reason requires manual conversion: does not exist in peer-type
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (*gomodules.xyz/encoding/json/types.IntHash vs int64)
	return nil
}

func autoConvert_v1alpha2_ElasticsearchStatus_To_v1alpha1_ElasticsearchStatus(in *v1alpha2.ElasticsearchStatus, out *ElasticsearchStatus, s conversion.Scope) error {
	out.Phase = DatabasePhase(in.Phase)
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (int64 vs *gomodules.xyz/encoding/json/types.IntHash)
	// WARNING: in.Conditions requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_Etcd_To_v1alpha2_Etcd(in *Etcd, out *v1alpha2.Etcd, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_EtcdSpec_To_v1alpha2_EtcdSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_EtcdStatus_To_v1alpha2_EtcdStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_Etcd_To_v1alpha2_Etcd is an autogenerated conversion function.
func Convert_v1alpha1_Etcd_To_v1alpha2_Etcd(in *Etcd, out *v1alpha2.Etcd, s conversion.Scope) error {
	return autoConvert_v1alpha1_Etcd_To_v1alpha2_Etcd(in, out, s)
}

func autoConvert_v1alpha2_Etcd_To_v1alpha1_Etcd(in *v1alpha2.Etcd, out *Etcd, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_EtcdSpec_To_v1alpha1_EtcdSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_EtcdStatus_To_v1alpha1_EtcdStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_Etcd_To_v1alpha1_Etcd is an autogenerated conversion function.
func Convert_v1alpha2_Etcd_To_v1alpha1_Etcd(in *v1alpha2.Etcd, out *Etcd, s conversion.Scope) error {
	return autoConvert_v1alpha2_Etcd_To_v1alpha1_Etcd(in, out, s)
}

func autoConvert_v1alpha1_EtcdList_To_v1alpha2_EtcdList(in *EtcdList, out *v1alpha2.EtcdList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1alpha2.Etcd, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Etcd_To_v1alpha2_Etcd(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_EtcdList_To_v1alpha2_EtcdList is an autogenerated conversion function.
func Convert_v1alpha1_EtcdList_To_v1alpha2_EtcdList(in *EtcdList, out *v1alpha2.EtcdList, s conversion.Scope) error {
	return autoConvert_v1alpha1_EtcdList_To_v1alpha2_EtcdList(in, out, s)
}

func autoConvert_v1alpha2_EtcdList_To_v1alpha1_EtcdList(in *v1alpha2.EtcdList, out *EtcdList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Etcd, len(*in))
		for i := range *in {
			if err := Convert_v1alpha2_Etcd_To_v1alpha1_Etcd(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha2_EtcdList_To_v1alpha1_EtcdList is an autogenerated conversion function.
func Convert_v1alpha2_EtcdList_To_v1alpha1_EtcdList(in *v1alpha2.EtcdList, out *EtcdList, s conversion.Scope) error {
	return autoConvert_v1alpha2_EtcdList_To_v1alpha1_EtcdList(in, out, s)
}

func autoConvert_v1alpha1_EtcdSpec_To_v1alpha2_EtcdSpec(in *EtcdSpec, out *v1alpha2.EtcdSpec, s conversion.Scope) error {
	out.Version = string(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	out.StorageType = v1alpha2.StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.DatabaseSecret requires manual conversion: does not exist in peer-type
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(v1alpha2.InitSpec)
		if err := Convert_v1alpha1_InitSpec_To_v1alpha2_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	// WARNING: in.BackupSchedule requires manual conversion: does not exist in peer-type
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1.AgentSpec)
		if err := apiv1alpha1.Convert_v1alpha1_AgentSpec_To_v1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	out.TLS = (*v1alpha2.TLSPolicy)(unsafe.Pointer(in.TLS))
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplate requires manual conversion: does not exist in peer-type
	// WARNING: in.UpdateStrategy requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = v1alpha2.TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha2_EtcdSpec_To_v1alpha1_EtcdSpec(in *v1alpha2.EtcdSpec, out *EtcdSpec, s conversion.Scope) error {
	out.Version = types.StrYo(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	out.StorageType = StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.AuthSecret requires manual conversion: does not exist in peer-type
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(InitSpec)
		if err := Convert_v1alpha2_InitSpec_To_v1alpha1_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1alpha1.AgentSpec)
		if err := apiv1alpha1.Convert_v1_AgentSpec_To_v1alpha1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	out.TLS = (*TLSPolicy)(unsafe.Pointer(in.TLS))
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplates requires manual conversion: does not exist in peer-type
	// WARNING: in.Halted requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha1_EtcdStatus_To_v1alpha2_EtcdStatus(in *EtcdStatus, out *v1alpha2.EtcdStatus, s conversion.Scope) error {
	out.Phase = v1alpha2.DatabasePhase(in.Phase)
	// WARNING: in.Reason requires manual conversion: does not exist in peer-type
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (*gomodules.xyz/encoding/json/types.IntHash vs int64)
	return nil
}

func autoConvert_v1alpha2_EtcdStatus_To_v1alpha1_EtcdStatus(in *v1alpha2.EtcdStatus, out *EtcdStatus, s conversion.Scope) error {
	out.Phase = DatabasePhase(in.Phase)
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (int64 vs *gomodules.xyz/encoding/json/types.IntHash)
	// WARNING: in.Conditions requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_InitSpec_To_v1alpha2_InitSpec(in *InitSpec, out *v1alpha2.InitSpec, s conversion.Scope) error {
	// WARNING: in.ScriptSource requires manual conversion: does not exist in peer-type
	// WARNING: in.SnapshotSource requires manual conversion: does not exist in peer-type
	// WARNING: in.PostgresWAL requires manual conversion: does not exist in peer-type
	// WARNING: in.StashRestoreSession requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha2_InitSpec_To_v1alpha1_InitSpec(in *v1alpha2.InitSpec, out *InitSpec, s conversion.Scope) error {
	// WARNING: in.Initialized requires manual conversion: does not exist in peer-type
	// WARNING: in.WaitForInitialRestore requires manual conversion: does not exist in peer-type
	// WARNING: in.Script requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_MariaDB_To_v1alpha2_MariaDB(in *MariaDB, out *v1alpha2.MariaDB, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_MariaDBSpec_To_v1alpha2_MariaDBSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_MariaDBStatus_To_v1alpha2_MariaDBStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_MariaDB_To_v1alpha2_MariaDB is an autogenerated conversion function.
func Convert_v1alpha1_MariaDB_To_v1alpha2_MariaDB(in *MariaDB, out *v1alpha2.MariaDB, s conversion.Scope) error {
	return autoConvert_v1alpha1_MariaDB_To_v1alpha2_MariaDB(in, out, s)
}

func autoConvert_v1alpha2_MariaDB_To_v1alpha1_MariaDB(in *v1alpha2.MariaDB, out *MariaDB, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_MariaDBSpec_To_v1alpha1_MariaDBSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_MariaDBStatus_To_v1alpha1_MariaDBStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_MariaDB_To_v1alpha1_MariaDB is an autogenerated conversion function.
func Convert_v1alpha2_MariaDB_To_v1alpha1_MariaDB(in *v1alpha2.MariaDB, out *MariaDB, s conversion.Scope) error {
	return autoConvert_v1alpha2_MariaDB_To_v1alpha1_MariaDB(in, out, s)
}

func autoConvert_v1alpha1_MariaDBList_To_v1alpha2_MariaDBList(in *MariaDBList, out *v1alpha2.MariaDBList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1alpha2.MariaDB, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_MariaDB_To_v1alpha2_MariaDB(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_MariaDBList_To_v1alpha2_MariaDBList is an autogenerated conversion function.
func Convert_v1alpha1_MariaDBList_To_v1alpha2_MariaDBList(in *MariaDBList, out *v1alpha2.MariaDBList, s conversion.Scope) error {
	return autoConvert_v1alpha1_MariaDBList_To_v1alpha2_MariaDBList(in, out, s)
}

func autoConvert_v1alpha2_MariaDBList_To_v1alpha1_MariaDBList(in *v1alpha2.MariaDBList, out *MariaDBList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MariaDB, len(*in))
		for i := range *in {
			if err := Convert_v1alpha2_MariaDB_To_v1alpha1_MariaDB(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha2_MariaDBList_To_v1alpha1_MariaDBList is an autogenerated conversion function.
func Convert_v1alpha2_MariaDBList_To_v1alpha1_MariaDBList(in *v1alpha2.MariaDBList, out *MariaDBList, s conversion.Scope) error {
	return autoConvert_v1alpha2_MariaDBList_To_v1alpha1_MariaDBList(in, out, s)
}

func autoConvert_v1alpha1_MariaDBSpec_To_v1alpha2_MariaDBSpec(in *MariaDBSpec, out *v1alpha2.MariaDBSpec, s conversion.Scope) error {
	out.Version = string(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	out.StorageType = v1alpha2.StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.DatabaseSecret requires manual conversion: does not exist in peer-type
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(v1alpha2.InitSpec)
		if err := Convert_v1alpha1_InitSpec_To_v1alpha2_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1.AgentSpec)
		if err := apiv1alpha1.Convert_v1alpha1_AgentSpec_To_v1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSource requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplate requires manual conversion: does not exist in peer-type
	// WARNING: in.UpdateStrategy requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = v1alpha2.TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha2_MariaDBSpec_To_v1alpha1_MariaDBSpec(in *v1alpha2.MariaDBSpec, out *MariaDBSpec, s conversion.Scope) error {
	out.Version = types.StrYo(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	out.StorageType = StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.AuthSecret requires manual conversion: does not exist in peer-type
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(InitSpec)
		if err := Convert_v1alpha2_InitSpec_To_v1alpha1_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1alpha1.AgentSpec)
		if err := apiv1alpha1.Convert_v1_AgentSpec_To_v1alpha1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSecret requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplates requires manual conversion: does not exist in peer-type
	// WARNING: in.RequireSSL requires manual conversion: does not exist in peer-type
	// WARNING: in.TLS requires manual conversion: does not exist in peer-type
	// WARNING: in.Halted requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha1_MariaDBStatus_To_v1alpha2_MariaDBStatus(in *MariaDBStatus, out *v1alpha2.MariaDBStatus, s conversion.Scope) error {
	out.Phase = v1alpha2.DatabasePhase(in.Phase)
	// WARNING: in.Reason requires manual conversion: does not exist in peer-type
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (*gomodules.xyz/encoding/json/types.IntHash vs int64)
	return nil
}

func autoConvert_v1alpha2_MariaDBStatus_To_v1alpha1_MariaDBStatus(in *v1alpha2.MariaDBStatus, out *MariaDBStatus, s conversion.Scope) error {
	out.Phase = DatabasePhase(in.Phase)
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (int64 vs *gomodules.xyz/encoding/json/types.IntHash)
	// WARNING: in.Conditions requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_MemberSecret_To_v1alpha2_MemberSecret(in *MemberSecret, out *v1alpha2.MemberSecret, s conversion.Scope) error {
	out.PeerSecret = in.PeerSecret
	out.ServerSecret = in.ServerSecret
	return nil
}

// Convert_v1alpha1_MemberSecret_To_v1alpha2_MemberSecret is an autogenerated conversion function.
func Convert_v1alpha1_MemberSecret_To_v1alpha2_MemberSecret(in *MemberSecret, out *v1alpha2.MemberSecret, s conversion.Scope) error {
	return autoConvert_v1alpha1_MemberSecret_To_v1alpha2_MemberSecret(in, out, s)
}

func autoConvert_v1alpha2_MemberSecret_To_v1alpha1_MemberSecret(in *v1alpha2.MemberSecret, out *MemberSecret, s conversion.Scope) error {
	out.PeerSecret = in.PeerSecret
	out.ServerSecret = in.ServerSecret
	return nil
}

// Convert_v1alpha2_MemberSecret_To_v1alpha1_MemberSecret is an autogenerated conversion function.
func Convert_v1alpha2_MemberSecret_To_v1alpha1_MemberSecret(in *v1alpha2.MemberSecret, out *MemberSecret, s conversion.Scope) error {
	return autoConvert_v1alpha2_MemberSecret_To_v1alpha1_MemberSecret(in, out, s)
}

func autoConvert_v1alpha1_Memcached_To_v1alpha2_Memcached(in *Memcached, out *v1alpha2.Memcached, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_MemcachedSpec_To_v1alpha2_MemcachedSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_MemcachedStatus_To_v1alpha2_MemcachedStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_Memcached_To_v1alpha2_Memcached is an autogenerated conversion function.
func Convert_v1alpha1_Memcached_To_v1alpha2_Memcached(in *Memcached, out *v1alpha2.Memcached, s conversion.Scope) error {
	return autoConvert_v1alpha1_Memcached_To_v1alpha2_Memcached(in, out, s)
}

func autoConvert_v1alpha2_Memcached_To_v1alpha1_Memcached(in *v1alpha2.Memcached, out *Memcached, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_MemcachedSpec_To_v1alpha1_MemcachedSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_MemcachedStatus_To_v1alpha1_MemcachedStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_Memcached_To_v1alpha1_Memcached is an autogenerated conversion function.
func Convert_v1alpha2_Memcached_To_v1alpha1_Memcached(in *v1alpha2.Memcached, out *Memcached, s conversion.Scope) error {
	return autoConvert_v1alpha2_Memcached_To_v1alpha1_Memcached(in, out, s)
}

func autoConvert_v1alpha1_MemcachedList_To_v1alpha2_MemcachedList(in *MemcachedList, out *v1alpha2.MemcachedList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1alpha2.Memcached, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Memcached_To_v1alpha2_Memcached(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_MemcachedList_To_v1alpha2_MemcachedList is an autogenerated conversion function.
func Convert_v1alpha1_MemcachedList_To_v1alpha2_MemcachedList(in *MemcachedList, out *v1alpha2.MemcachedList, s conversion.Scope) error {
	return autoConvert_v1alpha1_MemcachedList_To_v1alpha2_MemcachedList(in, out, s)
}

func autoConvert_v1alpha2_MemcachedList_To_v1alpha1_MemcachedList(in *v1alpha2.MemcachedList, out *MemcachedList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Memcached, len(*in))
		for i := range *in {
			if err := Convert_v1alpha2_Memcached_To_v1alpha1_Memcached(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha2_MemcachedList_To_v1alpha1_MemcachedList is an autogenerated conversion function.
func Convert_v1alpha2_MemcachedList_To_v1alpha1_MemcachedList(in *v1alpha2.MemcachedList, out *MemcachedList, s conversion.Scope) error {
	return autoConvert_v1alpha2_MemcachedList_To_v1alpha1_MemcachedList(in, out, s)
}

func autoConvert_v1alpha1_MemcachedSpec_To_v1alpha2_MemcachedSpec(in *MemcachedSpec, out *v1alpha2.MemcachedSpec, s conversion.Scope) error {
	out.Version = string(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1.AgentSpec)
		if err := apiv1alpha1.Convert_v1alpha1_AgentSpec_To_v1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSource requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplate requires manual conversion: does not exist in peer-type
	// WARNING: in.UpdateStrategy requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = v1alpha2.TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha2_MemcachedSpec_To_v1alpha1_MemcachedSpec(in *v1alpha2.MemcachedSpec, out *MemcachedSpec, s conversion.Scope) error {
	out.Version = types.StrYo(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1alpha1.AgentSpec)
		if err := apiv1alpha1.Convert_v1_AgentSpec_To_v1alpha1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSecret requires manual conversion: does not exist in peer-type
	// WARNING: in.DataVolume requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplates requires manual conversion: does not exist in peer-type
	// WARNING: in.TLS requires manual conversion: does not exist in peer-type
	// WARNING: in.Halted requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha1_MemcachedStatus_To_v1alpha2_MemcachedStatus(in *MemcachedStatus, out *v1alpha2.MemcachedStatus, s conversion.Scope) error {
	out.Phase = v1alpha2.DatabasePhase(in.Phase)
	// WARNING: in.Reason requires manual conversion: does not exist in peer-type
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (*gomodules.xyz/encoding/json/types.IntHash vs int64)
	return nil
}

func autoConvert_v1alpha2_MemcachedStatus_To_v1alpha1_MemcachedStatus(in *v1alpha2.MemcachedStatus, out *MemcachedStatus, s conversion.Scope) error {
	out.Phase = DatabasePhase(in.Phase)
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (int64 vs *gomodules.xyz/encoding/json/types.IntHash)
	// WARNING: in.Conditions requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_MongoDB_To_v1alpha2_MongoDB(in *MongoDB, out *v1alpha2.MongoDB, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_MongoDBSpec_To_v1alpha2_MongoDBSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_MongoDBStatus_To_v1alpha2_MongoDBStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_MongoDB_To_v1alpha2_MongoDB is an autogenerated conversion function.
func Convert_v1alpha1_MongoDB_To_v1alpha2_MongoDB(in *MongoDB, out *v1alpha2.MongoDB, s conversion.Scope) error {
	return autoConvert_v1alpha1_MongoDB_To_v1alpha2_MongoDB(in, out, s)
}

func autoConvert_v1alpha2_MongoDB_To_v1alpha1_MongoDB(in *v1alpha2.MongoDB, out *MongoDB, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_MongoDBSpec_To_v1alpha1_MongoDBSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_MongoDBStatus_To_v1alpha1_MongoDBStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_MongoDB_To_v1alpha1_MongoDB is an autogenerated conversion function.
func Convert_v1alpha2_MongoDB_To_v1alpha1_MongoDB(in *v1alpha2.MongoDB, out *MongoDB, s conversion.Scope) error {
	return autoConvert_v1alpha2_MongoDB_To_v1alpha1_MongoDB(in, out, s)
}

func autoConvert_v1alpha1_MongoDBConfigNode_To_v1alpha2_MongoDBConfigNode(in *MongoDBConfigNode, out *v1alpha2.MongoDBConfigNode, s conversion.Scope) error {
	if err := Convert_v1alpha1_MongoDBNode_To_v1alpha2_MongoDBNode(&in.MongoDBNode, &out.MongoDBNode, s); err != nil {
		return err
	}
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	return nil
}

// Convert_v1alpha1_MongoDBConfigNode_To_v1alpha2_MongoDBConfigNode is an autogenerated conversion function.
func Convert_v1alpha1_MongoDBConfigNode_To_v1alpha2_MongoDBConfigNode(in *MongoDBConfigNode, out *v1alpha2.MongoDBConfigNode, s conversion.Scope) error {
	return autoConvert_v1alpha1_MongoDBConfigNode_To_v1alpha2_MongoDBConfigNode(in, out, s)
}

func autoConvert_v1alpha2_MongoDBConfigNode_To_v1alpha1_MongoDBConfigNode(in *v1alpha2.MongoDBConfigNode, out *MongoDBConfigNode, s conversion.Scope) error {
	if err := Convert_v1alpha2_MongoDBNode_To_v1alpha1_MongoDBNode(&in.MongoDBNode, &out.MongoDBNode, s); err != nil {
		return err
	}
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	return nil
}

// Convert_v1alpha2_MongoDBConfigNode_To_v1alpha1_MongoDBConfigNode is an autogenerated conversion function.
func Convert_v1alpha2_MongoDBConfigNode_To_v1alpha1_MongoDBConfigNode(in *v1alpha2.MongoDBConfigNode, out *MongoDBConfigNode, s conversion.Scope) error {
	return autoConvert_v1alpha2_MongoDBConfigNode_To_v1alpha1_MongoDBConfigNode(in, out, s)
}

func autoConvert_v1alpha1_MongoDBList_To_v1alpha2_MongoDBList(in *MongoDBList, out *v1alpha2.MongoDBList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1alpha2.MongoDB, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_MongoDB_To_v1alpha2_MongoDB(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_MongoDBList_To_v1alpha2_MongoDBList is an autogenerated conversion function.
func Convert_v1alpha1_MongoDBList_To_v1alpha2_MongoDBList(in *MongoDBList, out *v1alpha2.MongoDBList, s conversion.Scope) error {
	return autoConvert_v1alpha1_MongoDBList_To_v1alpha2_MongoDBList(in, out, s)
}

func autoConvert_v1alpha2_MongoDBList_To_v1alpha1_MongoDBList(in *v1alpha2.MongoDBList, out *MongoDBList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MongoDB, len(*in))
		for i := range *in {
			if err := Convert_v1alpha2_MongoDB_To_v1alpha1_MongoDB(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha2_MongoDBList_To_v1alpha1_MongoDBList is an autogenerated conversion function.
func Convert_v1alpha2_MongoDBList_To_v1alpha1_MongoDBList(in *v1alpha2.MongoDBList, out *MongoDBList, s conversion.Scope) error {
	return autoConvert_v1alpha2_MongoDBList_To_v1alpha1_MongoDBList(in, out, s)
}

func autoConvert_v1alpha1_MongoDBMongosNode_To_v1alpha2_MongoDBMongosNode(in *MongoDBMongosNode, out *v1alpha2.MongoDBMongosNode, s conversion.Scope) error {
	if err := Convert_v1alpha1_MongoDBNode_To_v1alpha2_MongoDBNode(&in.MongoDBNode, &out.MongoDBNode, s); err != nil {
		return err
	}
	// WARNING: in.Strategy requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha2_MongoDBMongosNode_To_v1alpha1_MongoDBMongosNode(in *v1alpha2.MongoDBMongosNode, out *MongoDBMongosNode, s conversion.Scope) error {
	if err := Convert_v1alpha2_MongoDBNode_To_v1alpha1_MongoDBNode(&in.MongoDBNode, &out.MongoDBNode, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_MongoDBMongosNode_To_v1alpha1_MongoDBMongosNode is an autogenerated conversion function.
func Convert_v1alpha2_MongoDBMongosNode_To_v1alpha1_MongoDBMongosNode(in *v1alpha2.MongoDBMongosNode, out *MongoDBMongosNode, s conversion.Scope) error {
	return autoConvert_v1alpha2_MongoDBMongosNode_To_v1alpha1_MongoDBMongosNode(in, out, s)
}

func autoConvert_v1alpha1_MongoDBNode_To_v1alpha2_MongoDBNode(in *MongoDBNode, out *v1alpha2.MongoDBNode, s conversion.Scope) error {
	out.Replicas = in.Replicas
	out.Prefix = in.Prefix
	// WARNING: in.ConfigSource requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	return nil
}

func autoConvert_v1alpha2_MongoDBNode_To_v1alpha1_MongoDBNode(in *v1alpha2.MongoDBNode, out *MongoDBNode, s conversion.Scope) error {
	out.Replicas = in.Replicas
	out.Prefix = in.Prefix
	// WARNING: in.ConfigSecret requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	return nil
}

func autoConvert_v1alpha1_MongoDBReplicaSet_To_v1alpha2_MongoDBReplicaSet(in *MongoDBReplicaSet, out *v1alpha2.MongoDBReplicaSet, s conversion.Scope) error {
	out.Name = in.Name
	// WARNING: in.KeyFile requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha2_MongoDBReplicaSet_To_v1alpha1_MongoDBReplicaSet(in *v1alpha2.MongoDBReplicaSet, out *MongoDBReplicaSet, s conversion.Scope) error {
	out.Name = in.Name
	return nil
}

// Convert_v1alpha2_MongoDBReplicaSet_To_v1alpha1_MongoDBReplicaSet is an autogenerated conversion function.
func Convert_v1alpha2_MongoDBReplicaSet_To_v1alpha1_MongoDBReplicaSet(in *v1alpha2.MongoDBReplicaSet, out *MongoDBReplicaSet, s conversion.Scope) error {
	return autoConvert_v1alpha2_MongoDBReplicaSet_To_v1alpha1_MongoDBReplicaSet(in, out, s)
}

func autoConvert_v1alpha1_MongoDBShardNode_To_v1alpha2_MongoDBShardNode(in *MongoDBShardNode, out *v1alpha2.MongoDBShardNode, s conversion.Scope) error {
	out.Shards = in.Shards
	if err := Convert_v1alpha1_MongoDBNode_To_v1alpha2_MongoDBNode(&in.MongoDBNode, &out.MongoDBNode, s); err != nil {
		return err
	}
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	return nil
}

// Convert_v1alpha1_MongoDBShardNode_To_v1alpha2_MongoDBShardNode is an autogenerated conversion function.
func Convert_v1alpha1_MongoDBShardNode_To_v1alpha2_MongoDBShardNode(in *MongoDBShardNode, out *v1alpha2.MongoDBShardNode, s conversion.Scope) error {
	return autoConvert_v1alpha1_MongoDBShardNode_To_v1alpha2_MongoDBShardNode(in, out, s)
}

func autoConvert_v1alpha2_MongoDBShardNode_To_v1alpha1_MongoDBShardNode(in *v1alpha2.MongoDBShardNode, out *MongoDBShardNode, s conversion.Scope) error {
	out.Shards = in.Shards
	if err := Convert_v1alpha2_MongoDBNode_To_v1alpha1_MongoDBNode(&in.MongoDBNode, &out.MongoDBNode, s); err != nil {
		return err
	}
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	return nil
}

// Convert_v1alpha2_MongoDBShardNode_To_v1alpha1_MongoDBShardNode is an autogenerated conversion function.
func Convert_v1alpha2_MongoDBShardNode_To_v1alpha1_MongoDBShardNode(in *v1alpha2.MongoDBShardNode, out *MongoDBShardNode, s conversion.Scope) error {
	return autoConvert_v1alpha2_MongoDBShardNode_To_v1alpha1_MongoDBShardNode(in, out, s)
}

func autoConvert_v1alpha1_MongoDBShardingTopology_To_v1alpha2_MongoDBShardingTopology(in *MongoDBShardingTopology, out *v1alpha2.MongoDBShardingTopology, s conversion.Scope) error {
	if err := Convert_v1alpha1_MongoDBShardNode_To_v1alpha2_MongoDBShardNode(&in.Shard, &out.Shard, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_MongoDBConfigNode_To_v1alpha2_MongoDBConfigNode(&in.ConfigServer, &out.ConfigServer, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_MongoDBMongosNode_To_v1alpha2_MongoDBMongosNode(&in.Mongos, &out.Mongos, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_MongoDBShardingTopology_To_v1alpha2_MongoDBShardingTopology is an autogenerated conversion function.
func Convert_v1alpha1_MongoDBShardingTopology_To_v1alpha2_MongoDBShardingTopology(in *MongoDBShardingTopology, out *v1alpha2.MongoDBShardingTopology, s conversion.Scope) error {
	return autoConvert_v1alpha1_MongoDBShardingTopology_To_v1alpha2_MongoDBShardingTopology(in, out, s)
}

func autoConvert_v1alpha2_MongoDBShardingTopology_To_v1alpha1_MongoDBShardingTopology(in *v1alpha2.MongoDBShardingTopology, out *MongoDBShardingTopology, s conversion.Scope) error {
	if err := Convert_v1alpha2_MongoDBShardNode_To_v1alpha1_MongoDBShardNode(&in.Shard, &out.Shard, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_MongoDBConfigNode_To_v1alpha1_MongoDBConfigNode(&in.ConfigServer, &out.ConfigServer, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_MongoDBMongosNode_To_v1alpha1_MongoDBMongosNode(&in.Mongos, &out.Mongos, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_MongoDBShardingTopology_To_v1alpha1_MongoDBShardingTopology is an autogenerated conversion function.
func Convert_v1alpha2_MongoDBShardingTopology_To_v1alpha1_MongoDBShardingTopology(in *v1alpha2.MongoDBShardingTopology, out *MongoDBShardingTopology, s conversion.Scope) error {
	return autoConvert_v1alpha2_MongoDBShardingTopology_To_v1alpha1_MongoDBShardingTopology(in, out, s)
}

func autoConvert_v1alpha1_MongoDBSpec_To_v1alpha2_MongoDBSpec(in *MongoDBSpec, out *v1alpha2.MongoDBSpec, s conversion.Scope) error {
	out.Version = string(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	if in.ReplicaSet != nil {
		in, out := &in.ReplicaSet, &out.ReplicaSet
		*out = new(v1alpha2.MongoDBReplicaSet)
		if err := Convert_v1alpha1_MongoDBReplicaSet_To_v1alpha2_MongoDBReplicaSet(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ReplicaSet = nil
	}
	if in.ShardTopology != nil {
		in, out := &in.ShardTopology, &out.ShardTopology
		*out = new(v1alpha2.MongoDBShardingTopology)
		if err := Convert_v1alpha1_MongoDBShardingTopology_To_v1alpha2_MongoDBShardingTopology(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ShardTopology = nil
	}
	out.StorageType = v1alpha2.StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.DatabaseSecret requires manual conversion: does not exist in peer-type
	// WARNING: in.CertificateSecret requires manual conversion: does not exist in peer-type
	out.ClusterAuthMode = v1alpha2.ClusterAuthMode(in.ClusterAuthMode)
	out.SSLMode = v1alpha2.SSLMode(in.SSLMode)
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(v1alpha2.InitSpec)
		if err := Convert_v1alpha1_InitSpec_To_v1alpha2_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	// WARNING: in.BackupSchedule requires manual conversion: does not exist in peer-type
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1.AgentSpec)
		if err := apiv1alpha1.Convert_v1alpha1_AgentSpec_To_v1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSource requires manual conversion: does not exist in peer-type
	out.PodTemplate = (*offshootapiapiv1.PodTemplateSpec)(unsafe.Pointer(in.PodTemplate))
	// WARNING: in.ServiceTemplate requires manual conversion: does not exist in peer-type
	// WARNING: in.UpdateStrategy requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = v1alpha2.TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha2_MongoDBSpec_To_v1alpha1_MongoDBSpec(in *v1alpha2.MongoDBSpec, out *MongoDBSpec, s conversion.Scope) error {
	out.Version = types.StrYo(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	if in.ReplicaSet != nil {
		in, out := &in.ReplicaSet, &out.ReplicaSet
		*out = new(MongoDBReplicaSet)
		if err := Convert_v1alpha2_MongoDBReplicaSet_To_v1alpha1_MongoDBReplicaSet(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ReplicaSet = nil
	}
	if in.ShardTopology != nil {
		in, out := &in.ShardTopology, &out.ShardTopology
		*out = new(MongoDBShardingTopology)
		if err := Convert_v1alpha2_MongoDBShardingTopology_To_v1alpha1_MongoDBShardingTopology(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ShardTopology = nil
	}
	out.StorageType = StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.AuthSecret requires manual conversion: does not exist in peer-type
	out.ClusterAuthMode = ClusterAuthMode(in.ClusterAuthMode)
	out.SSLMode = SSLMode(in.SSLMode)
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(InitSpec)
		if err := Convert_v1alpha2_InitSpec_To_v1alpha1_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1alpha1.AgentSpec)
		if err := apiv1alpha1.Convert_v1_AgentSpec_To_v1alpha1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSecret requires manual conversion: does not exist in peer-type
	out.PodTemplate = (*offshootapiapiv1.PodTemplateSpec)(unsafe.Pointer(in.PodTemplate))
	// WARNING: in.ServiceTemplates requires manual conversion: does not exist in peer-type
	// WARNING: in.TLS requires manual conversion: does not exist in peer-type
	// WARNING: in.KeyFileSecret requires manual conversion: does not exist in peer-type
	// WARNING: in.Halted requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = TerminationPolicy(in.TerminationPolicy)
	// WARNING: in.StorageEngine requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_MongoDBStatus_To_v1alpha2_MongoDBStatus(in *MongoDBStatus, out *v1alpha2.MongoDBStatus, s conversion.Scope) error {
	out.Phase = v1alpha2.DatabasePhase(in.Phase)
	// WARNING: in.Reason requires manual conversion: does not exist in peer-type
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (*gomodules.xyz/encoding/json/types.IntHash vs int64)
	return nil
}

func autoConvert_v1alpha2_MongoDBStatus_To_v1alpha1_MongoDBStatus(in *v1alpha2.MongoDBStatus, out *MongoDBStatus, s conversion.Scope) error {
	out.Phase = DatabasePhase(in.Phase)
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (int64 vs *gomodules.xyz/encoding/json/types.IntHash)
	// WARNING: in.Conditions requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_MySQL_To_v1alpha2_MySQL(in *MySQL, out *v1alpha2.MySQL, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_MySQLSpec_To_v1alpha2_MySQLSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_MySQLStatus_To_v1alpha2_MySQLStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_MySQL_To_v1alpha2_MySQL is an autogenerated conversion function.
func Convert_v1alpha1_MySQL_To_v1alpha2_MySQL(in *MySQL, out *v1alpha2.MySQL, s conversion.Scope) error {
	return autoConvert_v1alpha1_MySQL_To_v1alpha2_MySQL(in, out, s)
}

func autoConvert_v1alpha2_MySQL_To_v1alpha1_MySQL(in *v1alpha2.MySQL, out *MySQL, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_MySQLSpec_To_v1alpha1_MySQLSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_MySQLStatus_To_v1alpha1_MySQLStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_MySQL_To_v1alpha1_MySQL is an autogenerated conversion function.
func Convert_v1alpha2_MySQL_To_v1alpha1_MySQL(in *v1alpha2.MySQL, out *MySQL, s conversion.Scope) error {
	return autoConvert_v1alpha2_MySQL_To_v1alpha1_MySQL(in, out, s)
}

func autoConvert_v1alpha1_MySQLClusterTopology_To_v1alpha2_MySQLClusterTopology(in *MySQLClusterTopology, out *v1alpha2.MySQLClusterTopology, s conversion.Scope) error {
	out.Mode = (*v1alpha2.MySQLClusterMode)(unsafe.Pointer(in.Mode))
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(v1alpha2.MySQLGroupSpec)
		if err := Convert_v1alpha1_MySQLGroupSpec_To_v1alpha2_MySQLGroupSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Group = nil
	}
	return nil
}

// Convert_v1alpha1_MySQLClusterTopology_To_v1alpha2_MySQLClusterTopology is an autogenerated conversion function.
func Convert_v1alpha1_MySQLClusterTopology_To_v1alpha2_MySQLClusterTopology(in *MySQLClusterTopology, out *v1alpha2.MySQLClusterTopology, s conversion.Scope) error {
	return autoConvert_v1alpha1_MySQLClusterTopology_To_v1alpha2_MySQLClusterTopology(in, out, s)
}

func autoConvert_v1alpha2_MySQLClusterTopology_To_v1alpha1_MySQLClusterTopology(in *v1alpha2.MySQLClusterTopology, out *MySQLClusterTopology, s conversion.Scope) error {
	out.Mode = (*MySQLClusterMode)(unsafe.Pointer(in.Mode))
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(MySQLGroupSpec)
		if err := Convert_v1alpha2_MySQLGroupSpec_To_v1alpha1_MySQLGroupSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Group = nil
	}
	return nil
}

// Convert_v1alpha2_MySQLClusterTopology_To_v1alpha1_MySQLClusterTopology is an autogenerated conversion function.
func Convert_v1alpha2_MySQLClusterTopology_To_v1alpha1_MySQLClusterTopology(in *v1alpha2.MySQLClusterTopology, out *MySQLClusterTopology, s conversion.Scope) error {
	return autoConvert_v1alpha2_MySQLClusterTopology_To_v1alpha1_MySQLClusterTopology(in, out, s)
}

func autoConvert_v1alpha1_MySQLGroupSpec_To_v1alpha2_MySQLGroupSpec(in *MySQLGroupSpec, out *v1alpha2.MySQLGroupSpec, s conversion.Scope) error {
	out.Mode = (*v1alpha2.MySQLGroupMode)(unsafe.Pointer(in.Mode))
	out.Name = in.Name
	// WARNING: in.BaseServerID requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha2_MySQLGroupSpec_To_v1alpha1_MySQLGroupSpec(in *v1alpha2.MySQLGroupSpec, out *MySQLGroupSpec, s conversion.Scope) error {
	out.Mode = (*MySQLGroupMode)(unsafe.Pointer(in.Mode))
	out.Name = in.Name
	return nil
}

// Convert_v1alpha2_MySQLGroupSpec_To_v1alpha1_MySQLGroupSpec is an autogenerated conversion function.
func Convert_v1alpha2_MySQLGroupSpec_To_v1alpha1_MySQLGroupSpec(in *v1alpha2.MySQLGroupSpec, out *MySQLGroupSpec, s conversion.Scope) error {
	return autoConvert_v1alpha2_MySQLGroupSpec_To_v1alpha1_MySQLGroupSpec(in, out, s)
}

func autoConvert_v1alpha1_MySQLList_To_v1alpha2_MySQLList(in *MySQLList, out *v1alpha2.MySQLList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1alpha2.MySQL, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_MySQL_To_v1alpha2_MySQL(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_MySQLList_To_v1alpha2_MySQLList is an autogenerated conversion function.
func Convert_v1alpha1_MySQLList_To_v1alpha2_MySQLList(in *MySQLList, out *v1alpha2.MySQLList, s conversion.Scope) error {
	return autoConvert_v1alpha1_MySQLList_To_v1alpha2_MySQLList(in, out, s)
}

func autoConvert_v1alpha2_MySQLList_To_v1alpha1_MySQLList(in *v1alpha2.MySQLList, out *MySQLList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MySQL, len(*in))
		for i := range *in {
			if err := Convert_v1alpha2_MySQL_To_v1alpha1_MySQL(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha2_MySQLList_To_v1alpha1_MySQLList is an autogenerated conversion function.
func Convert_v1alpha2_MySQLList_To_v1alpha1_MySQLList(in *v1alpha2.MySQLList, out *MySQLList, s conversion.Scope) error {
	return autoConvert_v1alpha2_MySQLList_To_v1alpha1_MySQLList(in, out, s)
}

func autoConvert_v1alpha1_MySQLSpec_To_v1alpha2_MySQLSpec(in *MySQLSpec, out *v1alpha2.MySQLSpec, s conversion.Scope) error {
	out.Version = string(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = new(v1alpha2.MySQLClusterTopology)
		if err := Convert_v1alpha1_MySQLClusterTopology_To_v1alpha2_MySQLClusterTopology(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Topology = nil
	}
	out.StorageType = v1alpha2.StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.DatabaseSecret requires manual conversion: does not exist in peer-type
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(v1alpha2.InitSpec)
		if err := Convert_v1alpha1_InitSpec_To_v1alpha2_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	// WARNING: in.BackupSchedule requires manual conversion: does not exist in peer-type
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1.AgentSpec)
		if err := apiv1alpha1.Convert_v1alpha1_AgentSpec_To_v1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSource requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplate requires manual conversion: does not exist in peer-type
	// WARNING: in.UpdateStrategy requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = v1alpha2.TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha2_MySQLSpec_To_v1alpha1_MySQLSpec(in *v1alpha2.MySQLSpec, out *MySQLSpec, s conversion.Scope) error {
	out.Version = types.StrYo(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = new(MySQLClusterTopology)
		if err := Convert_v1alpha2_MySQLClusterTopology_To_v1alpha1_MySQLClusterTopology(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Topology = nil
	}
	out.StorageType = StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.AuthSecret requires manual conversion: does not exist in peer-type
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(InitSpec)
		if err := Convert_v1alpha2_InitSpec_To_v1alpha1_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1alpha1.AgentSpec)
		if err := apiv1alpha1.Convert_v1_AgentSpec_To_v1alpha1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSecret requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplates requires manual conversion: does not exist in peer-type
	// WARNING: in.RequireSSL requires manual conversion: does not exist in peer-type
	// WARNING: in.TLS requires manual conversion: does not exist in peer-type
	// WARNING: in.Halted requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = TerminationPolicy(in.TerminationPolicy)
	// WARNING: in.UseAddressType requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_MySQLStatus_To_v1alpha2_MySQLStatus(in *MySQLStatus, out *v1alpha2.MySQLStatus, s conversion.Scope) error {
	out.Phase = v1alpha2.DatabasePhase(in.Phase)
	// WARNING: in.Reason requires manual conversion: does not exist in peer-type
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (*gomodules.xyz/encoding/json/types.IntHash vs int64)
	return nil
}

func autoConvert_v1alpha2_MySQLStatus_To_v1alpha1_MySQLStatus(in *v1alpha2.MySQLStatus, out *MySQLStatus, s conversion.Scope) error {
	out.Phase = DatabasePhase(in.Phase)
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (int64 vs *gomodules.xyz/encoding/json/types.IntHash)
	// WARNING: in.Conditions requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_PerconaXtraDB_To_v1alpha2_PerconaXtraDB(in *PerconaXtraDB, out *v1alpha2.PerconaXtraDB, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_PerconaXtraDBSpec_To_v1alpha2_PerconaXtraDBSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_PerconaXtraDBStatus_To_v1alpha2_PerconaXtraDBStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_PerconaXtraDB_To_v1alpha2_PerconaXtraDB is an autogenerated conversion function.
func Convert_v1alpha1_PerconaXtraDB_To_v1alpha2_PerconaXtraDB(in *PerconaXtraDB, out *v1alpha2.PerconaXtraDB, s conversion.Scope) error {
	return autoConvert_v1alpha1_PerconaXtraDB_To_v1alpha2_PerconaXtraDB(in, out, s)
}

func autoConvert_v1alpha2_PerconaXtraDB_To_v1alpha1_PerconaXtraDB(in *v1alpha2.PerconaXtraDB, out *PerconaXtraDB, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_PerconaXtraDBSpec_To_v1alpha1_PerconaXtraDBSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_PerconaXtraDBStatus_To_v1alpha1_PerconaXtraDBStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_PerconaXtraDB_To_v1alpha1_PerconaXtraDB is an autogenerated conversion function.
func Convert_v1alpha2_PerconaXtraDB_To_v1alpha1_PerconaXtraDB(in *v1alpha2.PerconaXtraDB, out *PerconaXtraDB, s conversion.Scope) error {
	return autoConvert_v1alpha2_PerconaXtraDB_To_v1alpha1_PerconaXtraDB(in, out, s)
}

func autoConvert_v1alpha1_PerconaXtraDBList_To_v1alpha2_PerconaXtraDBList(in *PerconaXtraDBList, out *v1alpha2.PerconaXtraDBList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1alpha2.PerconaXtraDB, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_PerconaXtraDB_To_v1alpha2_PerconaXtraDB(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_PerconaXtraDBList_To_v1alpha2_PerconaXtraDBList is an autogenerated conversion function.
func Convert_v1alpha1_PerconaXtraDBList_To_v1alpha2_PerconaXtraDBList(in *PerconaXtraDBList, out *v1alpha2.PerconaXtraDBList, s conversion.Scope) error {
	return autoConvert_v1alpha1_PerconaXtraDBList_To_v1alpha2_PerconaXtraDBList(in, out, s)
}

func autoConvert_v1alpha2_PerconaXtraDBList_To_v1alpha1_PerconaXtraDBList(in *v1alpha2.PerconaXtraDBList, out *PerconaXtraDBList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PerconaXtraDB, len(*in))
		for i := range *in {
			if err := Convert_v1alpha2_PerconaXtraDB_To_v1alpha1_PerconaXtraDB(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha2_PerconaXtraDBList_To_v1alpha1_PerconaXtraDBList is an autogenerated conversion function.
func Convert_v1alpha2_PerconaXtraDBList_To_v1alpha1_PerconaXtraDBList(in *v1alpha2.PerconaXtraDBList, out *PerconaXtraDBList, s conversion.Scope) error {
	return autoConvert_v1alpha2_PerconaXtraDBList_To_v1alpha1_PerconaXtraDBList(in, out, s)
}

func autoConvert_v1alpha1_PerconaXtraDBSpec_To_v1alpha2_PerconaXtraDBSpec(in *PerconaXtraDBSpec, out *v1alpha2.PerconaXtraDBSpec, s conversion.Scope) error {
	out.Version = string(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	// WARNING: in.PXC requires manual conversion: does not exist in peer-type
	out.StorageType = v1alpha2.StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.DatabaseSecret requires manual conversion: does not exist in peer-type
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(v1alpha2.InitSpec)
		if err := Convert_v1alpha1_InitSpec_To_v1alpha2_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1.AgentSpec)
		if err := apiv1alpha1.Convert_v1alpha1_AgentSpec_To_v1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSource requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplate requires manual conversion: does not exist in peer-type
	// WARNING: in.UpdateStrategy requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = v1alpha2.TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha2_PerconaXtraDBSpec_To_v1alpha1_PerconaXtraDBSpec(in *v1alpha2.PerconaXtraDBSpec, out *PerconaXtraDBSpec, s conversion.Scope) error {
	out.Version = types.StrYo(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	out.StorageType = StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.AuthSecret requires manual conversion: does not exist in peer-type
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(InitSpec)
		if err := Convert_v1alpha2_InitSpec_To_v1alpha1_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1alpha1.AgentSpec)
		if err := apiv1alpha1.Convert_v1_AgentSpec_To_v1alpha1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSecret requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplates requires manual conversion: does not exist in peer-type
	// WARNING: in.TLS requires manual conversion: does not exist in peer-type
	// WARNING: in.Halted requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha1_PerconaXtraDBStatus_To_v1alpha2_PerconaXtraDBStatus(in *PerconaXtraDBStatus, out *v1alpha2.PerconaXtraDBStatus, s conversion.Scope) error {
	out.Phase = v1alpha2.DatabasePhase(in.Phase)
	// WARNING: in.Reason requires manual conversion: does not exist in peer-type
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (*gomodules.xyz/encoding/json/types.IntHash vs int64)
	return nil
}

func autoConvert_v1alpha2_PerconaXtraDBStatus_To_v1alpha1_PerconaXtraDBStatus(in *v1alpha2.PerconaXtraDBStatus, out *PerconaXtraDBStatus, s conversion.Scope) error {
	out.Phase = DatabasePhase(in.Phase)
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (int64 vs *gomodules.xyz/encoding/json/types.IntHash)
	// WARNING: in.Conditions requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_Postgres_To_v1alpha2_Postgres(in *Postgres, out *v1alpha2.Postgres, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_PostgresSpec_To_v1alpha2_PostgresSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_PostgresStatus_To_v1alpha2_PostgresStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_Postgres_To_v1alpha2_Postgres is an autogenerated conversion function.
func Convert_v1alpha1_Postgres_To_v1alpha2_Postgres(in *Postgres, out *v1alpha2.Postgres, s conversion.Scope) error {
	return autoConvert_v1alpha1_Postgres_To_v1alpha2_Postgres(in, out, s)
}

func autoConvert_v1alpha2_Postgres_To_v1alpha1_Postgres(in *v1alpha2.Postgres, out *Postgres, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_PostgresSpec_To_v1alpha1_PostgresSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_PostgresStatus_To_v1alpha1_PostgresStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_Postgres_To_v1alpha1_Postgres is an autogenerated conversion function.
func Convert_v1alpha2_Postgres_To_v1alpha1_Postgres(in *v1alpha2.Postgres, out *Postgres, s conversion.Scope) error {
	return autoConvert_v1alpha2_Postgres_To_v1alpha1_Postgres(in, out, s)
}

func autoConvert_v1alpha1_PostgresList_To_v1alpha2_PostgresList(in *PostgresList, out *v1alpha2.PostgresList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1alpha2.Postgres, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Postgres_To_v1alpha2_Postgres(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_PostgresList_To_v1alpha2_PostgresList is an autogenerated conversion function.
func Convert_v1alpha1_PostgresList_To_v1alpha2_PostgresList(in *PostgresList, out *v1alpha2.PostgresList, s conversion.Scope) error {
	return autoConvert_v1alpha1_PostgresList_To_v1alpha2_PostgresList(in, out, s)
}

func autoConvert_v1alpha2_PostgresList_To_v1alpha1_PostgresList(in *v1alpha2.PostgresList, out *PostgresList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Postgres, len(*in))
		for i := range *in {
			if err := Convert_v1alpha2_Postgres_To_v1alpha1_Postgres(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha2_PostgresList_To_v1alpha1_PostgresList is an autogenerated conversion function.
func Convert_v1alpha2_PostgresList_To_v1alpha1_PostgresList(in *v1alpha2.PostgresList, out *PostgresList, s conversion.Scope) error {
	return autoConvert_v1alpha2_PostgresList_To_v1alpha1_PostgresList(in, out, s)
}

func autoConvert_v1alpha1_PostgresSpec_To_v1alpha2_PostgresSpec(in *PostgresSpec, out *v1alpha2.PostgresSpec, s conversion.Scope) error {
	out.Version = string(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	out.StandbyMode = (*v1alpha2.PostgresStandbyMode)(unsafe.Pointer(in.StandbyMode))
	out.StreamingMode = (*v1alpha2.PostgresStreamingMode)(unsafe.Pointer(in.StreamingMode))
	// WARNING: in.Archiver requires manual conversion: does not exist in peer-type
	if in.LeaderElection != nil {
		in, out := &in.LeaderElection, &out.LeaderElection
		*out = new(v1alpha2.PostgreLeaderElectionConfig)
		if err := Convert_v1alpha1_LeaderElectionConfig_To_v1alpha2_PostgreLeaderElectionConfig(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.LeaderElection = nil
	}
	// WARNING: in.DatabaseSecret requires manual conversion: does not exist in peer-type
	out.StorageType = v1alpha2.StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(v1alpha2.InitSpec)
		if err := Convert_v1alpha1_InitSpec_To_v1alpha2_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	// WARNING: in.BackupSchedule requires manual conversion: does not exist in peer-type
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1.AgentSpec)
		if err := apiv1alpha1.Convert_v1alpha1_AgentSpec_To_v1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSource requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplate requires manual conversion: does not exist in peer-type
	// WARNING: in.ReplicaServiceTemplate requires manual conversion: does not exist in peer-type
	// WARNING: in.UpdateStrategy requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = v1alpha2.TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha2_PostgresSpec_To_v1alpha1_PostgresSpec(in *v1alpha2.PostgresSpec, out *PostgresSpec, s conversion.Scope) error {
	out.Version = types.StrYo(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	out.StandbyMode = (*PostgresStandbyMode)(unsafe.Pointer(in.StandbyMode))
	out.StreamingMode = (*PostgresStreamingMode)(unsafe.Pointer(in.StreamingMode))
	if in.LeaderElection != nil {
		in, out := &in.LeaderElection, &out.LeaderElection
		*out = new(LeaderElectionConfig)
		if err := Convert_v1alpha2_PostgreLeaderElectionConfig_To_v1alpha1_LeaderElectionConfig(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.LeaderElection = nil
	}
	// WARNING: in.AuthSecret requires manual conversion: does not exist in peer-type
	out.StorageType = StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.ClientAuthMode requires manual conversion: does not exist in peer-type
	// WARNING: in.SSLMode requires manual conversion: does not exist in peer-type
	if in.Init != nil {
		in, out := &in.Init, &out.Init
		*out = new(InitSpec)
		if err := Convert_v1alpha2_InitSpec_To_v1alpha1_InitSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Init = nil
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1alpha1.AgentSpec)
		if err := apiv1alpha1.Convert_v1_AgentSpec_To_v1alpha1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSecret requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplates requires manual conversion: does not exist in peer-type
	// WARNING: in.TLS requires manual conversion: does not exist in peer-type
	// WARNING: in.Halted requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha1_PostgresStatus_To_v1alpha2_PostgresStatus(in *PostgresStatus, out *v1alpha2.PostgresStatus, s conversion.Scope) error {
	out.Phase = v1alpha2.DatabasePhase(in.Phase)
	// WARNING: in.Reason requires manual conversion: does not exist in peer-type
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (*gomodules.xyz/encoding/json/types.IntHash vs int64)
	return nil
}

func autoConvert_v1alpha2_PostgresStatus_To_v1alpha1_PostgresStatus(in *v1alpha2.PostgresStatus, out *PostgresStatus, s conversion.Scope) error {
	out.Phase = DatabasePhase(in.Phase)
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (int64 vs *gomodules.xyz/encoding/json/types.IntHash)
	// WARNING: in.Conditions requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_RecoveryTarget_To_v1alpha2_RecoveryTarget(in *RecoveryTarget, out *v1alpha2.RecoveryTarget, s conversion.Scope) error {
	out.TargetTime = in.TargetTime
	out.TargetTimeline = in.TargetTimeline
	out.TargetXID = in.TargetXID
	out.TargetInclusive = (*bool)(unsafe.Pointer(in.TargetInclusive))
	return nil
}

// Convert_v1alpha1_RecoveryTarget_To_v1alpha2_RecoveryTarget is an autogenerated conversion function.
func Convert_v1alpha1_RecoveryTarget_To_v1alpha2_RecoveryTarget(in *RecoveryTarget, out *v1alpha2.RecoveryTarget, s conversion.Scope) error {
	return autoConvert_v1alpha1_RecoveryTarget_To_v1alpha2_RecoveryTarget(in, out, s)
}

func autoConvert_v1alpha2_RecoveryTarget_To_v1alpha1_RecoveryTarget(in *v1alpha2.RecoveryTarget, out *RecoveryTarget, s conversion.Scope) error {
	out.TargetTime = in.TargetTime
	out.TargetTimeline = in.TargetTimeline
	out.TargetXID = in.TargetXID
	out.TargetInclusive = (*bool)(unsafe.Pointer(in.TargetInclusive))
	return nil
}

// Convert_v1alpha2_RecoveryTarget_To_v1alpha1_RecoveryTarget is an autogenerated conversion function.
func Convert_v1alpha2_RecoveryTarget_To_v1alpha1_RecoveryTarget(in *v1alpha2.RecoveryTarget, out *RecoveryTarget, s conversion.Scope) error {
	return autoConvert_v1alpha2_RecoveryTarget_To_v1alpha1_RecoveryTarget(in, out, s)
}

func autoConvert_v1alpha1_Redis_To_v1alpha2_Redis(in *Redis, out *v1alpha2.Redis, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_RedisSpec_To_v1alpha2_RedisSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_RedisStatus_To_v1alpha2_RedisStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_Redis_To_v1alpha2_Redis is an autogenerated conversion function.
func Convert_v1alpha1_Redis_To_v1alpha2_Redis(in *Redis, out *v1alpha2.Redis, s conversion.Scope) error {
	return autoConvert_v1alpha1_Redis_To_v1alpha2_Redis(in, out, s)
}

func autoConvert_v1alpha2_Redis_To_v1alpha1_Redis(in *v1alpha2.Redis, out *Redis, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_RedisSpec_To_v1alpha1_RedisSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_RedisStatus_To_v1alpha1_RedisStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_Redis_To_v1alpha1_Redis is an autogenerated conversion function.
func Convert_v1alpha2_Redis_To_v1alpha1_Redis(in *v1alpha2.Redis, out *Redis, s conversion.Scope) error {
	return autoConvert_v1alpha2_Redis_To_v1alpha1_Redis(in, out, s)
}

func autoConvert_v1alpha1_RedisClusterSpec_To_v1alpha2_RedisClusterSpec(in *RedisClusterSpec, out *v1alpha2.RedisClusterSpec, s conversion.Scope) error {
	out.Master = (*int32)(unsafe.Pointer(in.Master))
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	return nil
}

// Convert_v1alpha1_RedisClusterSpec_To_v1alpha2_RedisClusterSpec is an autogenerated conversion function.
func Convert_v1alpha1_RedisClusterSpec_To_v1alpha2_RedisClusterSpec(in *RedisClusterSpec, out *v1alpha2.RedisClusterSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_RedisClusterSpec_To_v1alpha2_RedisClusterSpec(in, out, s)
}

func autoConvert_v1alpha2_RedisClusterSpec_To_v1alpha1_RedisClusterSpec(in *v1alpha2.RedisClusterSpec, out *RedisClusterSpec, s conversion.Scope) error {
	out.Master = (*int32)(unsafe.Pointer(in.Master))
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	return nil
}

// Convert_v1alpha2_RedisClusterSpec_To_v1alpha1_RedisClusterSpec is an autogenerated conversion function.
func Convert_v1alpha2_RedisClusterSpec_To_v1alpha1_RedisClusterSpec(in *v1alpha2.RedisClusterSpec, out *RedisClusterSpec, s conversion.Scope) error {
	return autoConvert_v1alpha2_RedisClusterSpec_To_v1alpha1_RedisClusterSpec(in, out, s)
}

func autoConvert_v1alpha1_RedisList_To_v1alpha2_RedisList(in *RedisList, out *v1alpha2.RedisList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1alpha2.Redis, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Redis_To_v1alpha2_Redis(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_RedisList_To_v1alpha2_RedisList is an autogenerated conversion function.
func Convert_v1alpha1_RedisList_To_v1alpha2_RedisList(in *RedisList, out *v1alpha2.RedisList, s conversion.Scope) error {
	return autoConvert_v1alpha1_RedisList_To_v1alpha2_RedisList(in, out, s)
}

func autoConvert_v1alpha2_RedisList_To_v1alpha1_RedisList(in *v1alpha2.RedisList, out *RedisList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Redis, len(*in))
		for i := range *in {
			if err := Convert_v1alpha2_Redis_To_v1alpha1_Redis(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha2_RedisList_To_v1alpha1_RedisList is an autogenerated conversion function.
func Convert_v1alpha2_RedisList_To_v1alpha1_RedisList(in *v1alpha2.RedisList, out *RedisList, s conversion.Scope) error {
	return autoConvert_v1alpha2_RedisList_To_v1alpha1_RedisList(in, out, s)
}

func autoConvert_v1alpha1_RedisSpec_To_v1alpha2_RedisSpec(in *RedisSpec, out *v1alpha2.RedisSpec, s conversion.Scope) error {
	out.Version = string(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	out.Mode = v1alpha2.RedisMode(in.Mode)
	out.Cluster = (*v1alpha2.RedisClusterSpec)(unsafe.Pointer(in.Cluster))
	out.StorageType = v1alpha2.StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1.AgentSpec)
		if err := apiv1alpha1.Convert_v1alpha1_AgentSpec_To_v1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSource requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplate requires manual conversion: does not exist in peer-type
	// WARNING: in.UpdateStrategy requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = v1alpha2.TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha2_RedisSpec_To_v1alpha1_RedisSpec(in *v1alpha2.RedisSpec, out *RedisSpec, s conversion.Scope) error {
	out.Version = types.StrYo(in.Version)
	out.Replicas = (*int32)(unsafe.Pointer(in.Replicas))
	out.Mode = RedisMode(in.Mode)
	out.Cluster = (*RedisClusterSpec)(unsafe.Pointer(in.Cluster))
	out.StorageType = StorageType(in.StorageType)
	out.Storage = (*v1.PersistentVolumeClaimSpec)(unsafe.Pointer(in.Storage))
	// WARNING: in.AuthSecret requires manual conversion: does not exist in peer-type
	// WARNING: in.Init requires manual conversion: does not exist in peer-type
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(apiv1alpha1.AgentSpec)
		if err := apiv1alpha1.Convert_v1_AgentSpec_To_v1alpha1_AgentSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Monitor = nil
	}
	// WARNING: in.ConfigSecret requires manual conversion: does not exist in peer-type
	out.PodTemplate = in.PodTemplate
	// WARNING: in.ServiceTemplates requires manual conversion: does not exist in peer-type
	// WARNING: in.TLS requires manual conversion: does not exist in peer-type
	// WARNING: in.Halted requires manual conversion: does not exist in peer-type
	out.TerminationPolicy = TerminationPolicy(in.TerminationPolicy)
	return nil
}

func autoConvert_v1alpha1_RedisStatus_To_v1alpha2_RedisStatus(in *RedisStatus, out *v1alpha2.RedisStatus, s conversion.Scope) error {
	out.Phase = v1alpha2.DatabasePhase(in.Phase)
	// WARNING: in.Reason requires manual conversion: does not exist in peer-type
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (*gomodules.xyz/encoding/json/types.IntHash vs int64)
	return nil
}

func autoConvert_v1alpha2_RedisStatus_To_v1alpha1_RedisStatus(in *v1alpha2.RedisStatus, out *RedisStatus, s conversion.Scope) error {
	out.Phase = DatabasePhase(in.Phase)
	// WARNING: in.ObservedGeneration requires manual conversion: inconvertible types (int64 vs *gomodules.xyz/encoding/json/types.IntHash)
	// WARNING: in.Conditions requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_ScriptSourceSpec_To_v1alpha2_ScriptSourceSpec(in *ScriptSourceSpec, out *v1alpha2.ScriptSourceSpec, s conversion.Scope) error {
	out.ScriptPath = in.ScriptPath
	out.VolumeSource = in.VolumeSource
	return nil
}

// Convert_v1alpha1_ScriptSourceSpec_To_v1alpha2_ScriptSourceSpec is an autogenerated conversion function.
func Convert_v1alpha1_ScriptSourceSpec_To_v1alpha2_ScriptSourceSpec(in *ScriptSourceSpec, out *v1alpha2.ScriptSourceSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ScriptSourceSpec_To_v1alpha2_ScriptSourceSpec(in, out, s)
}

func autoConvert_v1alpha2_ScriptSourceSpec_To_v1alpha1_ScriptSourceSpec(in *v1alpha2.ScriptSourceSpec, out *ScriptSourceSpec, s conversion.Scope) error {
	out.ScriptPath = in.ScriptPath
	out.VolumeSource = in.VolumeSource
	return nil
}

// Convert_v1alpha2_ScriptSourceSpec_To_v1alpha1_ScriptSourceSpec is an autogenerated conversion function.
func Convert_v1alpha2_ScriptSourceSpec_To_v1alpha1_ScriptSourceSpec(in *v1alpha2.ScriptSourceSpec, out *ScriptSourceSpec, s conversion.Scope) error {
	return autoConvert_v1alpha2_ScriptSourceSpec_To_v1alpha1_ScriptSourceSpec(in, out, s)
}

func autoConvert_v1alpha1_TLSPolicy_To_v1alpha2_TLSPolicy(in *TLSPolicy, out *v1alpha2.TLSPolicy, s conversion.Scope) error {
	out.Member = (*v1alpha2.MemberSecret)(unsafe.Pointer(in.Member))
	out.OperatorSecret = in.OperatorSecret
	return nil
}

// Convert_v1alpha1_TLSPolicy_To_v1alpha2_TLSPolicy is an autogenerated conversion function.
func Convert_v1alpha1_TLSPolicy_To_v1alpha2_TLSPolicy(in *TLSPolicy, out *v1alpha2.TLSPolicy, s conversion.Scope) error {
	return autoConvert_v1alpha1_TLSPolicy_To_v1alpha2_TLSPolicy(in, out, s)
}

func autoConvert_v1alpha2_TLSPolicy_To_v1alpha1_TLSPolicy(in *v1alpha2.TLSPolicy, out *TLSPolicy, s conversion.Scope) error {
	out.Member = (*MemberSecret)(unsafe.Pointer(in.Member))
	out.OperatorSecret = in.OperatorSecret
	return nil
}

// Convert_v1alpha2_TLSPolicy_To_v1alpha1_TLSPolicy is an autogenerated conversion function.
func Convert_v1alpha2_TLSPolicy_To_v1alpha1_TLSPolicy(in *v1alpha2.TLSPolicy, out *TLSPolicy, s conversion.Scope) error {
	return autoConvert_v1alpha2_TLSPolicy_To_v1alpha1_TLSPolicy(in, out, s)
}
