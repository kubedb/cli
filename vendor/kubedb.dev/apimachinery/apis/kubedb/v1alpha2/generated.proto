/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kubedb.dev.apimachinery.apis.kubedb.v1alpha2;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";
import "kmodules.xyz/client-go/api/v1/generated.proto";
import "kmodules.xyz/custom-resources/apis/appcatalog/v1alpha1/generated.proto";
import "kmodules.xyz/monitoring-agent-api/api/v1/generated.proto";
import "kmodules.xyz/offshoot-api/api/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha2";

message ConnectionPoolConfig {
  // Port is the port number on which PgBouncer listens to clients. Default: 5432.
  // +optional
  optional int32 port = 1;

  // PoolMode is the pooling mechanism type. Default: session.
  // +optional
  optional string poolMode = 2;

  // MaxClientConnections is the maximum number of allowed client connections. Default: 100.
  // +optional
  optional int64 maxClientConnections = 3;

  // DefaultPoolSize specifies how many server connections to allow per user/database pair. Default: 20.
  // +optional
  optional int64 defaultPoolSize = 4;

  // MinPoolSize is used to add more server connections to pool if below this number. Default: 0 (disabled).
  // +optional
  optional int64 minPoolSize = 5;

  // ReservePoolSize specifies how many additional connections to allow to a pool. 0 disables. Default: 0 (disabled).
  // +optional
  optional int64 reservePoolSize = 6;

  // ReservePoolTimeoutSeconds is the number of seconds in which if a client has not been serviced,
  // pgbouncer enables use of additional connections from reserve pool. 0 disables. Default: 5.0.
  // +optional
  optional int64 reservePoolTimeoutSeconds = 7;

  // MaxDBConnections is the maximum number of connections allowed per-database. Default: unlimited.
  // +optional
  optional int64 maxDBConnections = 8;

  // MaxUserConnections is the maximum number of users allowed per-database. Default: unlimited.
  // +optional
  optional int64 maxUserConnections = 9;

  // StatsPeriodSeconds sets how often the averages shown in various SHOW commands are updated
  // and how often aggregated statistics are written to the log.
  // +optional
  optional int64 statsPeriodSeconds = 10;

  // AdminUsers specifies an array of users who can act as PgBouncer administrators.
  // +optional
  repeated string adminUsers = 11;

  // AuthType specifies how to authenticate users. Default: md5 (md5+plain text).
  // +optional
  optional string authType = 12;

  // AuthUser looks up any user not specified in auth_file from pg_shadow. Default: not set.
  // +optional
  optional string authUser = 13;

  // IgnoreStartupParameters specifies comma-separated startup parameters that
  // pgbouncer knows are handled by admin and it can ignore them.
  // +optional
  optional string ignoreStartupParameters = 14;
}

// CoordinatorSpec defines attributes of the coordinator container
message CoordinatorSpec {
  // Compute Resources required by coordinator container.
  // Cannot be updated.
  // More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  // +optional
  optional k8s.io.api.core.v1.ResourceRequirements resources = 1;

  // Security options the coordinator container should run with.
  // More info: https://kubernetes.io/docs/concepts/policy/security-context/
  // More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  // +optional
  optional k8s.io.api.core.v1.SecurityContext securityContext = 2;
}

message Databases {
  // Alias to uniquely identify a target database running inside a specific Postgres instance.
  optional string alias = 1;

  // DatabaseRef specifies the database appbinding reference in any namespace.
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.AppReference databaseRef = 2;

  // DatabaseName is the name of the target database inside a Postgres instance.
  optional string databaseName = 3;

  // AuthSecretRef points to a secret that contains the credentials
  // (username and password) of an existing user of this database.
  // It is used to bind a single user to this specific database connection.
  // +optional
  optional k8s.io.api.core.v1.LocalObjectReference authSecretRef = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=elasticsearches,singular=elasticsearch,shortName=es,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message Elasticsearch {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ElasticsearchSpec spec = 2;

  optional ElasticsearchStatus status = 3;
}

message ElasticsearchClusterTopology {
  optional ElasticsearchNode master = 1;

  optional ElasticsearchNode ingest = 2;

  optional ElasticsearchNode data = 3;

  optional ElasticsearchNode dataContent = 4;

  optional ElasticsearchNode dataHot = 5;

  optional ElasticsearchNode dataWarm = 6;

  optional ElasticsearchNode dataCold = 7;

  optional ElasticsearchNode dataFrozen = 8;

  optional ElasticsearchNode ml = 9;

  optional ElasticsearchNode transform = 10;

  optional ElasticsearchNode coordinating = 11;
}

message ElasticsearchList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Elasticsearch CRD objects
  repeated Elasticsearch items = 2;
}

message ElasticsearchNode {
  // Replicas represents number of replica for this specific type of node
  optional int32 replicas = 1;

  optional string suffix = 2;

  // Storage to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 3;

  // Compute Resources required by the sidecar container.
  optional k8s.io.api.core.v1.ResourceRequirements resources = 4;

  // An eviction is allowed if at most "maxUnavailable" pods selected by
  // "selector" are unavailable after the eviction, i.e. even in absence of
  // the evicted pod. For example, one can prevent all voluntary evictions
  // by specifying 0. This is a mutually exclusive setting with "minAvailable".
  // +optional
  optional k8s.io.apimachinery.pkg.util.intstr.IntOrString maxUnavailable = 5;
}

// Specifies the role mapping structure.
// Both 'json' and 'yaml' tags are used in structure metadata.
// The `json` tags (camel case) are used while taking input from users.
// The `yaml` tags (snake case) are used by the operator to generate roles_mapping.yml file.
message ElasticsearchRoleMapSpec {
  // Specifies the reserved status.
  // Resources that have this set to true canâ€™t be changed using the REST API or Kibana.
  // Default to "false".
  // +optional
  optional bool reserved = 1;

  // Specifies the hidden status.
  // Resources that have this set to true are not returned by the REST API
  // and not visible in Kibana.
  // Default to "false".
  // +optional
  optional bool hidden = 2;

  // Specifies a list of backend roles assigned to this role.
  // Backend roles can come from the internal user database,
  // LDAP groups, JSON web token claims or SAML assertions.
  // +optional
  repeated string backendRoles = 3;

  // Specifies a list of hosts assigned to this role.
  // +optional
  repeated string hosts = 4;

  // Specifies a list of users assigned to this role.
  // +optional
  repeated string users = 5;

  // Specifies a list of backend roles (migrated from ES-version6) assigned to this role.
  repeated string andBackendRoles = 6;
}

message ElasticsearchSpec {
  // Version of Elasticsearch to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a Elasticsearch database.
  optional int32 replicas = 2;

  // Elasticsearch topology for node specification
  optional ElasticsearchClusterTopology topology = 3;

  // To enable ssl for http layer
  optional bool enableSSL = 4;

  // disable security of authPlugin (ie, xpack or searchguard). It disables authentication security of user.
  // If unset, default is false
  optional bool disableSecurity = 5;

  // Database authentication secret
  optional k8s.io.api.core.v1.LocalObjectReference authSecret = 6;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 7;

  // Storage to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 8;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 9;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 10;

  // ConfigSecret is an optional field to provide custom configuration file for database.
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 11;

  // SecureConfigSecret is an optional field to provide secure settings for database.
  // 	- Ref: https://www.elastic.co/guide/en/elasticsearch/reference/7.14/secure-settings.html
  // Secure settings are store at "ES_CONFIG_DIR/elasticsearch.keystore" file (contents are encoded with password),
  // once the keystore created.
  // Expects a k8s secret name with data format:
  // 	data:
  // 		key: value
  // 		password: KEYSTORE_PASSWORD
  // 		s3.client.default.access_key: ACCESS_KEY
  // 		s3.client.default.secret_key: SECRET_KEY
  // +optional
  optional k8s.io.api.core.v1.LocalObjectReference secureConfigSecret = 12;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 13;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 14;

  // An eviction is allowed if at most "maxUnavailable" pods selected by
  // "selector" are unavailable after the eviction, i.e. even in absence of
  // the evicted pod. For example, one can prevent all voluntary evictions
  // by specifying 0. This is a mutually exclusive setting with "minAvailable".
  // +optional
  optional k8s.io.apimachinery.pkg.util.intstr.IntOrString maxUnavailable = 15;

  // TLS contains tls configurations
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 16;

  // InternalUsers contains internal user configurations.
  // Expected Input format:
  // internalUsers:
  //   <username1>:
  // 		...
  //   <username2>:
  // 		...
  // +optional
  map<string, ElasticsearchUserSpec> internalUsers = 17;

  // RolesMapping contains roles mapping configurations.
  // Expected Input format:
  // rolesMapping:
  //   <role1>:
  // 		...
  //   <role2>:
  // 		...
  // +optional
  map<string, ElasticsearchRoleMapSpec> rolesMapping = 18;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 19;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 20;

  // KernelSettings contains the additional kernel settings.
  // +optional
  optional KernelSettings kernelSettings = 21;
}

message ElasticsearchStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// Specifies the security plugin internal user structure.
// Both 'json' and 'yaml' tags are used in structure metadata.
// The `json` tags (camel case) are used while taking input from users.
// The `yaml` tags (snake case) are used by the operator to generate internal_users.yml file.
message ElasticsearchUserSpec {
  // Specifies the k8s secret name that holds the user credentials.
  // Default to "<resource-name>-<username>-cred".
  // +optional
  optional string secretName = 1;

  // Specifies the reserved status.
  // Resources that have this set to true canâ€™t be changed using the REST API or Kibana.
  // Default to "false".
  // +optional
  optional bool reserved = 2;

  // Specifies the hidden status.
  // Resources that have this set to true are not returned by the REST API
  // and not visible in Kibana.
  // Default to "false".
  // +optional
  optional bool hidden = 3;

  // Specifies a list of backend roles assigned to this user.
  // Backend roles can come from the internal user database,
  // LDAP groups, JSON web token claims or SAML assertions.
  // +optional
  repeated string backendRoles = 4;

  // Specifies a list of searchguard security plugin roles assigned to this user.
  // +optional
  repeated string searchGuardRoles = 5;

  // Specifies a list of opendistro security plugin roles assigned to this user.
  // +optional
  repeated string opendistroSecurityRoles = 6;

  // Specifies one or more custom attributes,
  // which can be used in index names and DLS queries.
  // +optional
  map<string, string> attributes = 7;

  // Specifies the description of the user
  // +optional
  optional string description = 8;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=etcds,singular=etcd,shortName=etc,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message Etcd {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EtcdSpec spec = 2;

  optional EtcdStatus status = 3;
}

message EtcdList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Etcd TPR objects
  repeated Etcd items = 2;
}

message EtcdSpec {
  // Version of Etcd to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a Etcd database.
  optional int32 replicas = 2;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 3;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 4;

  // Database authentication secret
  optional k8s.io.api.core.v1.LocalObjectReference authSecret = 5;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 6;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 8;

  // etcd cluster TLS configuration
  optional TLSPolicy tls = 9;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 10;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 11;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 12;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 13;
}

message EtcdStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message InitSpec {
  // Initialized indicates that this database has been initialized.
  // This will be set by the operator when status.conditions["Provisioned"] is set to ensure
  // that database is not mistakenly reset when recovered using disaster recovery tools.
  optional bool initialized = 1;

  // Wait for initial DataRestore condition
  optional bool waitForInitialRestore = 2;

  optional ScriptSourceSpec script = 3;
}

message KernelSettings {
  // Privileged specifies the status whether the init container
  // requires privileged access to perform the following commands.
  // +optional
  optional bool privileged = 1;

  // Sysctls hold a list of sysctls commands needs to apply to kernel.
  // +optional
  repeated k8s.io.api.core.v1.Sysctl sysctls = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mariadbs,singular=mariadb,shortName=md,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MariaDB {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MariaDBSpec spec = 2;

  optional MariaDBStatus status = 3;
}

message MariaDBList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MariaDB TPR objects
  repeated MariaDB items = 2;
}

message MariaDBSpec {
  // Version of MariaDB to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a MariaDB database.
  optional int32 replicas = 2;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 3;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 4;

  // Database authentication secret
  optional k8s.io.api.core.v1.LocalObjectReference authSecret = 5;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 6;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 7;

  // ConfigSecret is an optional field to provide custom configuration file for database (i.e custom-mysql.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 8;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 9;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 10;

  // Indicates that the database server need to be encrypted connections(ssl)
  // +optional
  optional bool requireSSL = 11;

  // TLS contains tls configurations
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 12;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 13;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 14;

  // Coordinator defines attributes of the coordinator container
  // +optional
  optional CoordinatorSpec coordinator = 15;
}

message MariaDBStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message MemberSecret {
  // PeerSecret is the secret containing TLS certs used by each etcd member pod
  // for the communication between etcd peers.
  optional string peerSecret = 1;

  // ServerSecret is the secret containing TLS certs used by each etcd member pod
  // for the communication between etcd server and its clients.
  optional string serverSecret = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=memcacheds,singular=memcached,shortName=mc,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message Memcached {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MemcachedSpec spec = 2;

  optional MemcachedStatus status = 3;
}

message MemcachedList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Memcached TPR objects
  repeated Memcached items = 2;
}

message MemcachedSpec {
  // Version of Memcached to be deployed.
  optional string version = 5;

  // Number of instances to deploy for a Memcached database.
  optional int32 replicas = 6;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 7;

  // ConfigSecret is an optional field to provide custom configuration file for database.
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 8;

  // DataVolume is an optional field to add one volume to each
  // memcached pod.  The volume will be made available under
  // /data and owned by the memcached user.
  //
  // While not mandated by the API and not configured
  // automatically, the intended purpose is to use that volume
  // for memcached's persistent memory support
  // (https://memcached.org/blog/persistent-memory/) by adding
  // the memory-file and memory-limit options to the config
  // (https://github.com/memcached/memcached/wiki/WarmRestart).
  //
  // For that purpose, a CSI inline volume provided by PMEM-CSI
  // can be used, in which case each pod will get its own, empty
  // volume. Warm restarts are not supported.
  //
  // For testing, an empty dir can be used instead.
  optional k8s.io.api.core.v1.VolumeSource dataVolume = 9;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 10;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 11;

  // TLS contains tls configurations
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 12;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 13;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 14;
}

message MemcachedStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mongodbs,singular=mongodb,shortName=mg,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MongoDB {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MongoDBSpec spec = 2;

  optional MongoDBStatus status = 3;
}

message MongoDBConfigNode {
  // MongoDB config server node configs
  optional MongoDBNode mongoDBNode = 1;

  // Storage to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 2;
}

message MongoDBList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MongoDB TPR objects
  repeated MongoDB items = 2;
}

message MongoDBMongosNode {
  // MongoDB mongos node configs
  optional MongoDBNode mongoDBNode = 1;
}

message MongoDBNode {
  // Replicas represents number of replicas of this specific node.
  // If current node has replicaset enabled, then replicas is the amount of replicaset nodes.
  optional int32 replicas = 1;

  // Prefix is the name prefix of this node.
  optional string prefix = 2;

  // ConfigSecret is an optional field to provide custom configuration file for database (i.e mongod.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 3;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 4;
}

message MongoDBReplicaSet {
  // Name of replicaset
  optional string name = 1;
}

message MongoDBShardNode {
  // Shards represents number of shards for shard type of node
  // More info: https://docs.mongodb.com/manual/core/sharded-cluster-shards/
  optional int32 shards = 1;

  // MongoDB sharding node configs
  optional MongoDBNode mongoDBNode = 2;

  // Storage to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 3;
}

message MongoDBShardingTopology {
  // Shard component of mongodb.
  // More info: https://docs.mongodb.com/manual/core/sharded-cluster-shards/
  optional MongoDBShardNode shard = 1;

  // Config Server (metadata) component of mongodb.
  // More info: https://docs.mongodb.com/manual/core/sharded-cluster-config-servers/
  optional MongoDBConfigNode configServer = 2;

  // Mongos (router) component of mongodb.
  // More info: https://docs.mongodb.com/manual/core/sharded-cluster-query-router/
  optional MongoDBMongosNode mongos = 3;
}

message MongoDBSpec {
  // Version of MongoDB to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a MongoDB database.
  optional int32 replicas = 2;

  // MongoDB replica set
  optional MongoDBReplicaSet replicaSet = 3;

  // MongoDB sharding topology.
  optional MongoDBShardingTopology shardTopology = 4;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 5;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 6;

  // Database authentication secret
  optional k8s.io.api.core.v1.LocalObjectReference authSecret = 7;

  // ClusterAuthMode for replicaset or sharding. (default will be x509 if sslmode is not `disabled`.)
  // See available ClusterAuthMode: https://docs.mongodb.com/manual/reference/program/mongod/#cmdoption-mongod-clusterauthmode
  optional string clusterAuthMode = 8;

  // SSLMode for both standalone and clusters. (default, disabled.)
  // See more options: https://docs.mongodb.com/manual/reference/program/mongod/#cmdoption-mongod-sslmode
  optional string sslMode = 9;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 10;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 11;

  // ConfigSecret is an optional field to provide custom configuration file for database (i.e mongod.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 12;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 13;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 14;

  // TLS contains tls configurations for client and server.
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 15;

  // Secret for KeyFileSecret. Contains keyfile `key.txt` if spec.clusterAuthMode == keyFile || sendKeyFile
  optional k8s.io.api.core.v1.LocalObjectReference keyFileSecret = 16;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 17;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 18;

  // StorageEngine can be wiredTiger (default) or inMemory
  // See available StorageEngine: https://docs.mongodb.com/manual/core/storage-engines/
  optional string storageEngine = 19;

  // Coordinator defines attributes of the coordinator container
  // +optional
  optional CoordinatorSpec coordinator = 20;
}

message MongoDBStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mysqls,singular=mysql,shortName=my,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MySQL {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MySQLSpec spec = 2;

  optional MySQLStatus status = 3;
}

message MySQLClusterTopology {
  // If set to -
  // "GroupReplication", GroupSpec is required and MySQL servers will start  a replication group
  optional string mode = 1;

  // Group replication info for MySQL
  optional MySQLGroupSpec group = 2;

  // InnoDBCluster replication info for MySQL InnodbCluster
  // +optional
  optional MySQLInnoDBClusterSpec innoDBCluster = 3;
}

message MySQLGroupSpec {
  // TODO: "Multi-Primary" needs to be implemented
  // Group Replication can be deployed in either "Single-Primary" or "Multi-Primary" mode
  // +kubebuilder:default=Single-Primary
  optional string mode = 1;

  // Group name is a version 4 UUID
  // ref: https://dev.mysql.com/doc/refman/5.7/en/group-replication-options.html#sysvar_group_replication_group_name
  optional string name = 2;
}

message MySQLInnoDBClusterSpec {
  // +kubebuilder:default=Single-Primary
  // +optional
  optional string mode = 1;

  optional MySQLRouterSpec router = 2;
}

message MySQLList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MySQL TPR objects
  repeated MySQL items = 2;
}

message MySQLRouterSpec {
  // +optional
  // +kubebuilder:default:=1
  // +kubebuilder:validation:Minimum:=1
  optional int32 replicas = 3;

  // PodTemplate is an optional configuration for pods used to expose MySQL router
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 2;
}

message MySQLSpec {
  // Version of MySQL to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a MySQL database. In case of MySQL group
  // replication, max allowed value is 9 (default 3).
  // (see ref: https://dev.mysql.com/doc/refman/5.7/en/group-replication-frequently-asked-questions.html)
  optional int32 replicas = 2;

  // MySQL cluster topology
  optional MySQLClusterTopology topology = 3;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 4;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 5;

  // Database authentication secret
  optional k8s.io.api.core.v1.LocalObjectReference authSecret = 6;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 7;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 9;

  // ConfigSecret is an optional field to provide custom configuration file for database (i.e custom-mysql.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 10;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 11;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 12;

  // Indicates that the database server need to be encrypted connections(ssl)
  // +optional
  optional bool requireSSL = 13;

  // TLS contains tls configurations for client and server.
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 14;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 15;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 16;

  // Indicated whether to use DNS or IP address to address pods in a db cluster.
  // If IP address is used, HostNetwork will be used. Defaults to DNS.
  // +kubebuilder:default:=DNS
  // +optional
  // +default="DNS"
  optional string useAddressType = 17;

  // Coordinator defines attributes of the coordinator container
  // +optional
  optional CoordinatorSpec coordinator = 18;
}

message MySQLStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message NamedServiceTemplateSpec {
  // Alias represents the identifier of the service.
  optional string alias = 1;

  // ServiceTemplate is an optional configuration for a service used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplateSpec = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=perconaxtradbs,singular=perconaxtradb,shortName=px,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PerconaXtraDB {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PerconaXtraDBSpec spec = 2;

  optional PerconaXtraDBStatus status = 3;
}

message PerconaXtraDBList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PerconaXtraDB TPR objects
  repeated PerconaXtraDB items = 2;
}

message PerconaXtraDBSpec {
  // Version of PerconaXtraDB to be deployed.
  optional string version = 1;

  // Number of instances to deploy for PerconaXtraDB.
  // Replicas: 1		-->		Deploy standalone PerconaXtraDB
  // Replicas: > 1	-->		Deploy PerconaXtraDB cluster with specified number of masters
  optional int32 replicas = 2;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 3;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 4;

  // Database authentication secret
  optional k8s.io.api.core.v1.LocalObjectReference authSecret = 5;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 6;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 7;

  // ConfigSecret is an optional field to provide custom configuration file for database (i.e custom-mysql.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 8;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 9;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 10;

  // TLS contains tls configurations for client and server.
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 11;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 12;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 13;
}

message PerconaXtraDBStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=pgbouncers,singular=pgbouncer,shortName=pb,categories={proxy,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PgBouncer {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PgBouncerSpec spec = 2;

  optional PgBouncerStatus status = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message PgBouncerList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PgBouncer CRD objects.
  repeated PgBouncer items = 2;
}

message PgBouncerSpec {
  // Version of PgBouncer to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a PgBouncer instance.
  // +optional
  optional int32 replicas = 2;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 3;

  // PodTemplate is an optional configuration for pods.
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 4;

  // Databases to proxy by connection pooling.
  // +optional
  repeated Databases databases = 5;

  // ConnectionPoolConfig defines Connection pool configuration.
  // +optional
  optional ConnectionPoolConfig connectionPool = 6;

  // UserListSecretRef is a secret with a list of PgBouncer user and passwords.
  // +optional
  optional k8s.io.api.core.v1.LocalObjectReference userListSecretRef = 7;

  // Monitor is used monitor database instance.
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 8;

  // TLS contains tls configurations for client and server.
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 9;
}

message PgBouncerStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// PostgreLeaderElectionConfig contains essential attributes of leader election.
message PostgreLeaderElectionConfig {
  // LeaseDuration is the duration in second that non-leader candidates will
  // wait to force acquire leadership. This is measured against time of
  // last observed ack. Default 15
  // Deprecated
  optional int32 leaseDurationSeconds = 1;

  // RenewDeadline is the duration in second that the acting master will retry
  // refreshing leadership before giving up. Normally, LeaseDuration * 2 / 3.
  // Default 10
  // Deprecated
  optional int32 renewDeadlineSeconds = 2;

  // RetryPeriod is the duration in second the LeaderElector clients should wait
  // between tries of actions. Normally, LeaseDuration / 3.
  // Default 2
  // Deprecated
  optional int32 retryPeriodSeconds = 3;

  // MaximumLagBeforeFailover is used as maximum lag tolerance for the cluster.
  // when ever a replica is lagging more than MaximumLagBeforeFailover
  // this node need to sync manually with the primary node. default value is 32MB
  // +default=33554432
  // +kubebuilder:default:=33554432
  // +optional
  optional uint64 maximumLagBeforeFailover = 4;

  // Period between Node.Tick invocations
  // +kubebuilder:default:="100ms"
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration period = 5;

  // ElectionTick is the number of Node.Tick invocations that must pass between
  // 	elections. That is, if a follower does not receive any message from the
  //  leader of current term before ElectionTick has elapsed, it will become
  // 	candidate and start an election. ElectionTick must be greater than
  //  HeartbeatTick. We suggest ElectionTick = 10 * HeartbeatTick to avoid
  //  unnecessary leader switching. default value is 10.
  // +default=10
  // +kubebuilder:default:=10
  // +optional
  optional int32 electionTick = 6;

  // HeartbeatTick is the number of Node.Tick invocations that must pass between
  // heartbeats. That is, a leader sends heartbeat messages to maintain its
  // leadership every HeartbeatTick ticks. default value is 1.
  // +default=1
  // +kubebuilder:default:=1
  // +optional
  optional int32 heartbeatTick = 7;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=postgreses,singular=postgres,shortName=pg,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message Postgres {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PostgresSpec spec = 2;

  optional PostgresStatus status = 3;
}

message PostgresList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Postgres CRD objects
  repeated Postgres items = 2;
}

message PostgresSpec {
  // Version of Postgres to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a Postgres database.
  optional int32 replicas = 2;

  // Standby mode
  optional string standbyMode = 3;

  // Streaming mode
  optional string streamingMode = 4;

  // Leader election configuration
  // +optional
  optional PostgreLeaderElectionConfig leaderElection = 5;

  // Database authentication secret
  optional k8s.io.api.core.v1.LocalObjectReference authSecret = 6;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 7;

  // Storage to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 8;

  // ClientAuthMode for sidecar or sharding. (default will be md5. [md5;scram;cert])
  optional string clientAuthMode = 9;

  // SSLMode for both standalone and clusters. [disable;allow;prefer;require;verify-ca;verify-full]
  optional string sslMode = 10;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 11;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 12;

  // ConfigSecret is an optional field to provide custom configuration file for database (i.e postgresql.conf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 13;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 14;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 15;

  // TLS contains tls configurations for client and server.
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 16;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 17;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 18;

  // Coordinator defines attributes of the coordinator container
  // +optional
  optional CoordinatorSpec coordinator = 19;
}

message PostgresStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=proxysqls,singular=proxysql,shortName=prx,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message ProxySQL {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ProxySQLSpec spec = 2;

  optional ProxySQLStatus status = 3;
}

message ProxySQLBackendSpec {
  // Ref lets one to locate the typed referenced object
  // (in our case, it is the MySQL/Percona-XtraDB/ProxySQL object)
  // inside the same namespace.
  optional k8s.io.api.core.v1.TypedLocalObjectReference ref = 7;

  // Number of backend servers.
  optional int32 replicas = 8;
}

message ProxySQLList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of ProxySQL TPR objects
  repeated ProxySQL items = 2;
}

message ProxySQLSpec {
  // Version of ProxySQL to be deployed.
  optional string version = 1;

  // Number of instances to deploy for ProxySQL. Currently we support only replicas = 1.
  // TODO: If replicas > 1, proxysql will be clustered
  optional int32 replicas = 2;

  // Mode specifies the type of MySQL/Percona-XtraDB/MariaDB cluster for which proxysql
  // will be configured. It must be either "Galera" or "GroupReplication"
  optional string mode = 3;

  // Backend specifies the information about backend MySQL/Percona-XtraDB/MariaDB servers
  optional ProxySQLBackendSpec backend = 4;

  // ProxySQL secret containing username and password for root user and proxysql user
  optional k8s.io.api.core.v1.LocalObjectReference authSecret = 5;

  // Monitor is used monitor proxysql instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 6;

  // ConfigSecret is an optional field to provide custom configuration file for proxysql (i.e custom-proxysql.cnf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 7;

  // PodTemplate is an optional configuration for pods used to expose proxysql
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 8;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 9;

  // TLS contains tls configurations for client and server.
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 10;
}

message ProxySQLStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message RecoveryTarget {
  // TargetTime specifies the time stamp up to which recovery will proceed.
  optional string targetTime = 1;

  // TargetTimeline specifies recovering into a particular timeline.
  // The default is to recover along the same timeline that was current when the base backup was taken.
  optional string targetTimeline = 2;

  // TargetXID specifies the transaction ID up to which recovery will proceed.
  optional string targetXID = 3;

  // TargetInclusive specifies whether to include ongoing transaction in given target point.
  optional bool targetInclusive = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=redises,singular=redis,shortName=rd,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message Redis {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RedisSpec spec = 2;

  optional RedisStatus status = 3;
}

message RedisClusterSpec {
  // Number of master nodes. It must be >= 3. If not specified, defaults to 3.
  optional int32 master = 1;

  // Number of replica(s) per master node. If not specified, defaults to 1.
  optional int32 replicas = 2;
}

message RedisList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Redis TPR objects
  repeated Redis items = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=redissentinels,singular=redissentinel,shortName=rdsentinel,categories={datastore,kubedb,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message RedisSentinel {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RedisSentinelSpec spec = 2;

  optional RedisSentinelStatus status = 3;
}

message RedisSentinelList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of RedisSentinel TPR objects
  repeated RedisSentinel items = 2;
}

message RedisSentinelRef {
  // Name of the refereed sentinel
  optional string name = 1;

  // Namespace where refereed sentinel has been deployed
  optional string namespace = 2;
}

message RedisSentinelSpec {
  // Version of Postgres to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a Redis Sentinel.
  optional int32 replicas = 2;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 3;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 4;

  // TLS contains tls configurations for client and server.
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 5;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 6;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 7;

  // Database authentication secret
  optional k8s.io.api.core.v1.LocalObjectReference authSecret = 8;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 9;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 11;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 10;
}

message RedisSentinelStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message RedisSpec {
  // Version of Redis to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a Redis database.
  optional int32 replicas = 2;

  // Default is "Standalone". If set to "Cluster", ClusterSpec is required and redis servers will
  // start in cluster mode
  optional string mode = 3;

  optional RedisSentinelRef sentinelRef = 4;

  // Redis cluster configuration for running redis servers in cluster mode. Required if Mode is set to "Cluster"
  optional RedisClusterSpec cluster = 5;

  // StorageType can be durable (default) or ephemeral
  optional string storageType = 6;

  // Storage spec to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 7;

  // Database authentication secret
  optional k8s.io.api.core.v1.LocalObjectReference authSecret = 8;

  // Init is used to initialize database
  // +optional
  optional InitSpec init = 9;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 10;

  // ConfigSecret is an optional field to provide custom configuration file for database (i.e redis.conf).
  // If specified, this file will be used as configuration file otherwise default configuration file will be used.
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 11;

  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 12;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 13;

  // TLS contains tls configurations for client and server.
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 14;

  // Indicates that the database is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 15;

  // TerminationPolicy controls the delete operation for database
  // +optional
  optional string terminationPolicy = 16;

  // Coordinator defines attributes of the coordinator container
  // +optional
  optional CoordinatorSpec coordinator = 17;
}

message RedisStatus {
  // Specifies the current phase of the database
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the database, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message ScriptSourceSpec {
  optional string scriptPath = 1;

  optional k8s.io.api.core.v1.VolumeSource volumeSource = 2;
}

message TLSPolicy {
  optional MemberSecret member = 1;

  optional string operatorSecret = 2;
}

