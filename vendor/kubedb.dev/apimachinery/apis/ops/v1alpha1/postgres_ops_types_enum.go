// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1alpha1

import (
	"fmt"
	"strings"
)

const (
	// PostgresOpsRequestTypeUpgrade is a PostgresOpsRequestType of type Upgrade.
	PostgresOpsRequestTypeUpgrade PostgresOpsRequestType = "Upgrade"
	// PostgresOpsRequestTypeUpdateVersion is a PostgresOpsRequestType of type UpdateVersion.
	PostgresOpsRequestTypeUpdateVersion PostgresOpsRequestType = "UpdateVersion"
	// PostgresOpsRequestTypeHorizontalScaling is a PostgresOpsRequestType of type HorizontalScaling.
	PostgresOpsRequestTypeHorizontalScaling PostgresOpsRequestType = "HorizontalScaling"
	// PostgresOpsRequestTypeVerticalScaling is a PostgresOpsRequestType of type VerticalScaling.
	PostgresOpsRequestTypeVerticalScaling PostgresOpsRequestType = "VerticalScaling"
	// PostgresOpsRequestTypeVolumeExpansion is a PostgresOpsRequestType of type VolumeExpansion.
	PostgresOpsRequestTypeVolumeExpansion PostgresOpsRequestType = "VolumeExpansion"
	// PostgresOpsRequestTypeRestart is a PostgresOpsRequestType of type Restart.
	PostgresOpsRequestTypeRestart PostgresOpsRequestType = "Restart"
	// PostgresOpsRequestTypeReconfigure is a PostgresOpsRequestType of type Reconfigure.
	PostgresOpsRequestTypeReconfigure PostgresOpsRequestType = "Reconfigure"
	// PostgresOpsRequestTypeReconfigureTLS is a PostgresOpsRequestType of type ReconfigureTLS.
	PostgresOpsRequestTypeReconfigureTLS PostgresOpsRequestType = "ReconfigureTLS"
)

var ErrInvalidPostgresOpsRequestType = fmt.Errorf("not a valid PostgresOpsRequestType, try [%s]", strings.Join(_PostgresOpsRequestTypeNames, ", "))

var _PostgresOpsRequestTypeNames = []string{
	string(PostgresOpsRequestTypeUpgrade),
	string(PostgresOpsRequestTypeUpdateVersion),
	string(PostgresOpsRequestTypeHorizontalScaling),
	string(PostgresOpsRequestTypeVerticalScaling),
	string(PostgresOpsRequestTypeVolumeExpansion),
	string(PostgresOpsRequestTypeRestart),
	string(PostgresOpsRequestTypeReconfigure),
	string(PostgresOpsRequestTypeReconfigureTLS),
}

// PostgresOpsRequestTypeNames returns a list of possible string values of PostgresOpsRequestType.
func PostgresOpsRequestTypeNames() []string {
	tmp := make([]string, len(_PostgresOpsRequestTypeNames))
	copy(tmp, _PostgresOpsRequestTypeNames)
	return tmp
}

// PostgresOpsRequestTypeValues returns a list of the values for PostgresOpsRequestType
func PostgresOpsRequestTypeValues() []PostgresOpsRequestType {
	return []PostgresOpsRequestType{
		PostgresOpsRequestTypeUpgrade,
		PostgresOpsRequestTypeUpdateVersion,
		PostgresOpsRequestTypeHorizontalScaling,
		PostgresOpsRequestTypeVerticalScaling,
		PostgresOpsRequestTypeVolumeExpansion,
		PostgresOpsRequestTypeRestart,
		PostgresOpsRequestTypeReconfigure,
		PostgresOpsRequestTypeReconfigureTLS,
	}
}

// String implements the Stringer interface.
func (x PostgresOpsRequestType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x PostgresOpsRequestType) IsValid() bool {
	_, err := ParsePostgresOpsRequestType(string(x))
	return err == nil
}

var _PostgresOpsRequestTypeValue = map[string]PostgresOpsRequestType{
	"Upgrade":           PostgresOpsRequestTypeUpgrade,
	"UpdateVersion":     PostgresOpsRequestTypeUpdateVersion,
	"HorizontalScaling": PostgresOpsRequestTypeHorizontalScaling,
	"VerticalScaling":   PostgresOpsRequestTypeVerticalScaling,
	"VolumeExpansion":   PostgresOpsRequestTypeVolumeExpansion,
	"Restart":           PostgresOpsRequestTypeRestart,
	"Reconfigure":       PostgresOpsRequestTypeReconfigure,
	"ReconfigureTLS":    PostgresOpsRequestTypeReconfigureTLS,
}

// ParsePostgresOpsRequestType attempts to convert a string to a PostgresOpsRequestType.
func ParsePostgresOpsRequestType(name string) (PostgresOpsRequestType, error) {
	if x, ok := _PostgresOpsRequestTypeValue[name]; ok {
		return x, nil
	}
	return PostgresOpsRequestType(""), fmt.Errorf("%s is %w", name, ErrInvalidPostgresOpsRequestType)
}

// MustParsePostgresOpsRequestType converts a string to a PostgresOpsRequestType, and panics if is not valid.
func MustParsePostgresOpsRequestType(name string) PostgresOpsRequestType {
	val, err := ParsePostgresOpsRequestType(name)
	if err != nil {
		panic(err)
	}
	return val
}
