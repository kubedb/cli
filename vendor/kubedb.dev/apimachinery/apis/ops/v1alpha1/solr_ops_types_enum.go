// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1alpha1

import (
	"fmt"
	"strings"
)

const (
	// SolrOpsRequestTypeRestart is a SolrOpsRequestType of type Restart.
	SolrOpsRequestTypeRestart SolrOpsRequestType = "Restart"
)

var ErrInvalidSolrOpsRequestType = fmt.Errorf("not a valid SolrOpsRequestType, try [%s]", strings.Join(_SolrOpsRequestTypeNames, ", "))

var _SolrOpsRequestTypeNames = []string{
	string(SolrOpsRequestTypeRestart),
}

// SolrOpsRequestTypeNames returns a list of possible string values of SolrOpsRequestType.
func SolrOpsRequestTypeNames() []string {
	tmp := make([]string, len(_SolrOpsRequestTypeNames))
	copy(tmp, _SolrOpsRequestTypeNames)
	return tmp
}

// SolrOpsRequestTypeValues returns a list of the values for SolrOpsRequestType
func SolrOpsRequestTypeValues() []SolrOpsRequestType {
	return []SolrOpsRequestType{
		SolrOpsRequestTypeRestart,
	}
}

// String implements the Stringer interface.
func (x SolrOpsRequestType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SolrOpsRequestType) IsValid() bool {
	_, err := ParseSolrOpsRequestType(string(x))
	return err == nil
}

var _SolrOpsRequestTypeValue = map[string]SolrOpsRequestType{
	"Restart": SolrOpsRequestTypeRestart,
}

// ParseSolrOpsRequestType attempts to convert a string to a SolrOpsRequestType.
func ParseSolrOpsRequestType(name string) (SolrOpsRequestType, error) {
	if x, ok := _SolrOpsRequestTypeValue[name]; ok {
		return x, nil
	}
	return SolrOpsRequestType(""), fmt.Errorf("%s is %w", name, ErrInvalidSolrOpsRequestType)
}

// MustParseSolrOpsRequestType converts a string to a SolrOpsRequestType, and panics if is not valid.
func MustParseSolrOpsRequestType(name string) SolrOpsRequestType {
	val, err := ParseSolrOpsRequestType(name)
	if err != nil {
		panic(err)
	}
	return val
}
