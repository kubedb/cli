// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1alpha1

import (
	"fmt"
	"strings"
)

const (
	// IgniteOpsRequestTypeUpdateVersion is a IgniteOpsRequestType of type UpdateVersion.
	IgniteOpsRequestTypeUpdateVersion IgniteOpsRequestType = "UpdateVersion"
	// IgniteOpsRequestTypeHorizontalScaling is a IgniteOpsRequestType of type HorizontalScaling.
	IgniteOpsRequestTypeHorizontalScaling IgniteOpsRequestType = "HorizontalScaling"
	// IgniteOpsRequestTypeVerticalScaling is a IgniteOpsRequestType of type VerticalScaling.
	IgniteOpsRequestTypeVerticalScaling IgniteOpsRequestType = "VerticalScaling"
	// IgniteOpsRequestTypeVolumeExpansion is a IgniteOpsRequestType of type VolumeExpansion.
	IgniteOpsRequestTypeVolumeExpansion IgniteOpsRequestType = "VolumeExpansion"
	// IgniteOpsRequestTypeRestart is a IgniteOpsRequestType of type Restart.
	IgniteOpsRequestTypeRestart IgniteOpsRequestType = "Restart"
	// IgniteOpsRequestTypeReconfigure is a IgniteOpsRequestType of type Reconfigure.
	IgniteOpsRequestTypeReconfigure IgniteOpsRequestType = "Reconfigure"
	// IgniteOpsRequestTypeReconfigureTLS is a IgniteOpsRequestType of type ReconfigureTLS.
	IgniteOpsRequestTypeReconfigureTLS IgniteOpsRequestType = "ReconfigureTLS"
	// IgniteOpsRequestTypeRotateAuth is a IgniteOpsRequestType of type RotateAuth.
	IgniteOpsRequestTypeRotateAuth IgniteOpsRequestType = "RotateAuth"
)

var ErrInvalidIgniteOpsRequestType = fmt.Errorf("not a valid IgniteOpsRequestType, try [%s]", strings.Join(_IgniteOpsRequestTypeNames, ", "))

var _IgniteOpsRequestTypeNames = []string{
	string(IgniteOpsRequestTypeUpdateVersion),
	string(IgniteOpsRequestTypeHorizontalScaling),
	string(IgniteOpsRequestTypeVerticalScaling),
	string(IgniteOpsRequestTypeVolumeExpansion),
	string(IgniteOpsRequestTypeRestart),
	string(IgniteOpsRequestTypeReconfigure),
	string(IgniteOpsRequestTypeReconfigureTLS),
	string(IgniteOpsRequestTypeRotateAuth),
}

// IgniteOpsRequestTypeNames returns a list of possible string values of IgniteOpsRequestType.
func IgniteOpsRequestTypeNames() []string {
	tmp := make([]string, len(_IgniteOpsRequestTypeNames))
	copy(tmp, _IgniteOpsRequestTypeNames)
	return tmp
}

// IgniteOpsRequestTypeValues returns a list of the values for IgniteOpsRequestType
func IgniteOpsRequestTypeValues() []IgniteOpsRequestType {
	return []IgniteOpsRequestType{
		IgniteOpsRequestTypeUpdateVersion,
		IgniteOpsRequestTypeHorizontalScaling,
		IgniteOpsRequestTypeVerticalScaling,
		IgniteOpsRequestTypeVolumeExpansion,
		IgniteOpsRequestTypeRestart,
		IgniteOpsRequestTypeReconfigure,
		IgniteOpsRequestTypeReconfigureTLS,
		IgniteOpsRequestTypeRotateAuth,
	}
}

// String implements the Stringer interface.
func (x IgniteOpsRequestType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IgniteOpsRequestType) IsValid() bool {
	_, err := ParseIgniteOpsRequestType(string(x))
	return err == nil
}

var _IgniteOpsRequestTypeValue = map[string]IgniteOpsRequestType{
	"UpdateVersion":     IgniteOpsRequestTypeUpdateVersion,
	"HorizontalScaling": IgniteOpsRequestTypeHorizontalScaling,
	"VerticalScaling":   IgniteOpsRequestTypeVerticalScaling,
	"VolumeExpansion":   IgniteOpsRequestTypeVolumeExpansion,
	"Restart":           IgniteOpsRequestTypeRestart,
	"Reconfigure":       IgniteOpsRequestTypeReconfigure,
	"ReconfigureTLS":    IgniteOpsRequestTypeReconfigureTLS,
	"RotateAuth":        IgniteOpsRequestTypeRotateAuth,
}

// ParseIgniteOpsRequestType attempts to convert a string to a IgniteOpsRequestType.
func ParseIgniteOpsRequestType(name string) (IgniteOpsRequestType, error) {
	if x, ok := _IgniteOpsRequestTypeValue[name]; ok {
		return x, nil
	}
	return IgniteOpsRequestType(""), fmt.Errorf("%s is %w", name, ErrInvalidIgniteOpsRequestType)
}

// MustParseIgniteOpsRequestType converts a string to a IgniteOpsRequestType, and panics if is not valid.
func MustParseIgniteOpsRequestType(name string) IgniteOpsRequestType {
	val, err := ParseIgniteOpsRequestType(name)
	if err != nil {
		panic(err)
	}
	return val
}
