// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1alpha1

import (
	"fmt"
	"strings"
)

const (
	// ZooKeeperOpsRequestTypeRestart is a ZooKeeperOpsRequestType of type Restart.
	ZooKeeperOpsRequestTypeRestart ZooKeeperOpsRequestType = "Restart"
)

var ErrInvalidZooKeeperOpsRequestType = fmt.Errorf("not a valid ZooKeeperOpsRequestType, try [%s]", strings.Join(_ZooKeeperOpsRequestTypeNames, ", "))

var _ZooKeeperOpsRequestTypeNames = []string{
	string(ZooKeeperOpsRequestTypeRestart),
}

// ZooKeeperOpsRequestTypeNames returns a list of possible string values of ZooKeeperOpsRequestType.
func ZooKeeperOpsRequestTypeNames() []string {
	tmp := make([]string, len(_ZooKeeperOpsRequestTypeNames))
	copy(tmp, _ZooKeeperOpsRequestTypeNames)
	return tmp
}

// ZooKeeperOpsRequestTypeValues returns a list of the values for ZooKeeperOpsRequestType
func ZooKeeperOpsRequestTypeValues() []ZooKeeperOpsRequestType {
	return []ZooKeeperOpsRequestType{
		ZooKeeperOpsRequestTypeRestart,
	}
}

// String implements the Stringer interface.
func (x ZooKeeperOpsRequestType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ZooKeeperOpsRequestType) IsValid() bool {
	_, err := ParseZooKeeperOpsRequestType(string(x))
	return err == nil
}

var _ZooKeeperOpsRequestTypeValue = map[string]ZooKeeperOpsRequestType{
	"Restart": ZooKeeperOpsRequestTypeRestart,
}

// ParseZooKeeperOpsRequestType attempts to convert a string to a ZooKeeperOpsRequestType.
func ParseZooKeeperOpsRequestType(name string) (ZooKeeperOpsRequestType, error) {
	if x, ok := _ZooKeeperOpsRequestTypeValue[name]; ok {
		return x, nil
	}
	return ZooKeeperOpsRequestType(""), fmt.Errorf("%s is %w", name, ErrInvalidZooKeeperOpsRequestType)
}

// MustParseZooKeeperOpsRequestType converts a string to a ZooKeeperOpsRequestType, and panics if is not valid.
func MustParseZooKeeperOpsRequestType(name string) ZooKeeperOpsRequestType {
	val, err := ParseZooKeeperOpsRequestType(name)
	if err != nil {
		panic(err)
	}
	return val
}
