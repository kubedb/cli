// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1alpha1

import (
	"fmt"
	"strings"
)

const (
	// MariaDBOpsRequestTypeUpgrade is a MariaDBOpsRequestType of type Upgrade.
	MariaDBOpsRequestTypeUpgrade MariaDBOpsRequestType = "Upgrade"
	// MariaDBOpsRequestTypeUpdateVersion is a MariaDBOpsRequestType of type UpdateVersion.
	MariaDBOpsRequestTypeUpdateVersion MariaDBOpsRequestType = "UpdateVersion"
	// MariaDBOpsRequestTypeHorizontalScaling is a MariaDBOpsRequestType of type HorizontalScaling.
	MariaDBOpsRequestTypeHorizontalScaling MariaDBOpsRequestType = "HorizontalScaling"
	// MariaDBOpsRequestTypeVerticalScaling is a MariaDBOpsRequestType of type VerticalScaling.
	MariaDBOpsRequestTypeVerticalScaling MariaDBOpsRequestType = "VerticalScaling"
	// MariaDBOpsRequestTypeVolumeExpansion is a MariaDBOpsRequestType of type VolumeExpansion.
	MariaDBOpsRequestTypeVolumeExpansion MariaDBOpsRequestType = "VolumeExpansion"
	// MariaDBOpsRequestTypeRestart is a MariaDBOpsRequestType of type Restart.
	MariaDBOpsRequestTypeRestart MariaDBOpsRequestType = "Restart"
	// MariaDBOpsRequestTypeReconfigure is a MariaDBOpsRequestType of type Reconfigure.
	MariaDBOpsRequestTypeReconfigure MariaDBOpsRequestType = "Reconfigure"
	// MariaDBOpsRequestTypeReconfigureTLS is a MariaDBOpsRequestType of type ReconfigureTLS.
	MariaDBOpsRequestTypeReconfigureTLS MariaDBOpsRequestType = "ReconfigureTLS"
)

var ErrInvalidMariaDBOpsRequestType = fmt.Errorf("not a valid MariaDBOpsRequestType, try [%s]", strings.Join(_MariaDBOpsRequestTypeNames, ", "))

var _MariaDBOpsRequestTypeNames = []string{
	string(MariaDBOpsRequestTypeUpgrade),
	string(MariaDBOpsRequestTypeUpdateVersion),
	string(MariaDBOpsRequestTypeHorizontalScaling),
	string(MariaDBOpsRequestTypeVerticalScaling),
	string(MariaDBOpsRequestTypeVolumeExpansion),
	string(MariaDBOpsRequestTypeRestart),
	string(MariaDBOpsRequestTypeReconfigure),
	string(MariaDBOpsRequestTypeReconfigureTLS),
}

// MariaDBOpsRequestTypeNames returns a list of possible string values of MariaDBOpsRequestType.
func MariaDBOpsRequestTypeNames() []string {
	tmp := make([]string, len(_MariaDBOpsRequestTypeNames))
	copy(tmp, _MariaDBOpsRequestTypeNames)
	return tmp
}

// MariaDBOpsRequestTypeValues returns a list of the values for MariaDBOpsRequestType
func MariaDBOpsRequestTypeValues() []MariaDBOpsRequestType {
	return []MariaDBOpsRequestType{
		MariaDBOpsRequestTypeUpgrade,
		MariaDBOpsRequestTypeUpdateVersion,
		MariaDBOpsRequestTypeHorizontalScaling,
		MariaDBOpsRequestTypeVerticalScaling,
		MariaDBOpsRequestTypeVolumeExpansion,
		MariaDBOpsRequestTypeRestart,
		MariaDBOpsRequestTypeReconfigure,
		MariaDBOpsRequestTypeReconfigureTLS,
	}
}

// String implements the Stringer interface.
func (x MariaDBOpsRequestType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x MariaDBOpsRequestType) IsValid() bool {
	_, err := ParseMariaDBOpsRequestType(string(x))
	return err == nil
}

var _MariaDBOpsRequestTypeValue = map[string]MariaDBOpsRequestType{
	"Upgrade":           MariaDBOpsRequestTypeUpgrade,
	"UpdateVersion":     MariaDBOpsRequestTypeUpdateVersion,
	"HorizontalScaling": MariaDBOpsRequestTypeHorizontalScaling,
	"VerticalScaling":   MariaDBOpsRequestTypeVerticalScaling,
	"VolumeExpansion":   MariaDBOpsRequestTypeVolumeExpansion,
	"Restart":           MariaDBOpsRequestTypeRestart,
	"Reconfigure":       MariaDBOpsRequestTypeReconfigure,
	"ReconfigureTLS":    MariaDBOpsRequestTypeReconfigureTLS,
}

// ParseMariaDBOpsRequestType attempts to convert a string to a MariaDBOpsRequestType.
func ParseMariaDBOpsRequestType(name string) (MariaDBOpsRequestType, error) {
	if x, ok := _MariaDBOpsRequestTypeValue[name]; ok {
		return x, nil
	}
	return MariaDBOpsRequestType(""), fmt.Errorf("%s is %w", name, ErrInvalidMariaDBOpsRequestType)
}

// MustParseMariaDBOpsRequestType converts a string to a MariaDBOpsRequestType, and panics if is not valid.
func MustParseMariaDBOpsRequestType(name string) MariaDBOpsRequestType {
	val, err := ParseMariaDBOpsRequestType(name)
	if err != nil {
		panic(err)
	}
	return val
}
