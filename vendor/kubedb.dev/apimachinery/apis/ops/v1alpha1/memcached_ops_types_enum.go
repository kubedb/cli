// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1alpha1

import (
	"fmt"
	"strings"
)

const (
	// MemcachedOpsRequestTypeUpgrade is a MemcachedOpsRequestType of type Upgrade.
	MemcachedOpsRequestTypeUpgrade MemcachedOpsRequestType = "Upgrade"
	// MemcachedOpsRequestTypeUpdateVersion is a MemcachedOpsRequestType of type UpdateVersion.
	MemcachedOpsRequestTypeUpdateVersion MemcachedOpsRequestType = "UpdateVersion"
	// MemcachedOpsRequestTypeHorizontalScaling is a MemcachedOpsRequestType of type HorizontalScaling.
	MemcachedOpsRequestTypeHorizontalScaling MemcachedOpsRequestType = "HorizontalScaling"
	// MemcachedOpsRequestTypeVerticalScaling is a MemcachedOpsRequestType of type VerticalScaling.
	MemcachedOpsRequestTypeVerticalScaling MemcachedOpsRequestType = "VerticalScaling"
	// MemcachedOpsRequestTypeVolumeExpansion is a MemcachedOpsRequestType of type VolumeExpansion.
	MemcachedOpsRequestTypeVolumeExpansion MemcachedOpsRequestType = "VolumeExpansion"
	// MemcachedOpsRequestTypeRestart is a MemcachedOpsRequestType of type Restart.
	MemcachedOpsRequestTypeRestart MemcachedOpsRequestType = "Restart"
	// MemcachedOpsRequestTypeReconfigure is a MemcachedOpsRequestType of type Reconfigure.
	MemcachedOpsRequestTypeReconfigure MemcachedOpsRequestType = "Reconfigure"
	// MemcachedOpsRequestTypeReconfigureTLS is a MemcachedOpsRequestType of type ReconfigureTLS.
	MemcachedOpsRequestTypeReconfigureTLS MemcachedOpsRequestType = "ReconfigureTLS"
)

var ErrInvalidMemcachedOpsRequestType = fmt.Errorf("not a valid MemcachedOpsRequestType, try [%s]", strings.Join(_MemcachedOpsRequestTypeNames, ", "))

var _MemcachedOpsRequestTypeNames = []string{
	string(MemcachedOpsRequestTypeUpgrade),
	string(MemcachedOpsRequestTypeUpdateVersion),
	string(MemcachedOpsRequestTypeHorizontalScaling),
	string(MemcachedOpsRequestTypeVerticalScaling),
	string(MemcachedOpsRequestTypeVolumeExpansion),
	string(MemcachedOpsRequestTypeRestart),
	string(MemcachedOpsRequestTypeReconfigure),
	string(MemcachedOpsRequestTypeReconfigureTLS),
}

// MemcachedOpsRequestTypeNames returns a list of possible string values of MemcachedOpsRequestType.
func MemcachedOpsRequestTypeNames() []string {
	tmp := make([]string, len(_MemcachedOpsRequestTypeNames))
	copy(tmp, _MemcachedOpsRequestTypeNames)
	return tmp
}

// MemcachedOpsRequestTypeValues returns a list of the values for MemcachedOpsRequestType
func MemcachedOpsRequestTypeValues() []MemcachedOpsRequestType {
	return []MemcachedOpsRequestType{
		MemcachedOpsRequestTypeUpgrade,
		MemcachedOpsRequestTypeUpdateVersion,
		MemcachedOpsRequestTypeHorizontalScaling,
		MemcachedOpsRequestTypeVerticalScaling,
		MemcachedOpsRequestTypeVolumeExpansion,
		MemcachedOpsRequestTypeRestart,
		MemcachedOpsRequestTypeReconfigure,
		MemcachedOpsRequestTypeReconfigureTLS,
	}
}

// String implements the Stringer interface.
func (x MemcachedOpsRequestType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x MemcachedOpsRequestType) IsValid() bool {
	_, err := ParseMemcachedOpsRequestType(string(x))
	return err == nil
}

var _MemcachedOpsRequestTypeValue = map[string]MemcachedOpsRequestType{
	"Upgrade":           MemcachedOpsRequestTypeUpgrade,
	"UpdateVersion":     MemcachedOpsRequestTypeUpdateVersion,
	"HorizontalScaling": MemcachedOpsRequestTypeHorizontalScaling,
	"VerticalScaling":   MemcachedOpsRequestTypeVerticalScaling,
	"VolumeExpansion":   MemcachedOpsRequestTypeVolumeExpansion,
	"Restart":           MemcachedOpsRequestTypeRestart,
	"Reconfigure":       MemcachedOpsRequestTypeReconfigure,
	"ReconfigureTLS":    MemcachedOpsRequestTypeReconfigureTLS,
}

// ParseMemcachedOpsRequestType attempts to convert a string to a MemcachedOpsRequestType.
func ParseMemcachedOpsRequestType(name string) (MemcachedOpsRequestType, error) {
	if x, ok := _MemcachedOpsRequestTypeValue[name]; ok {
		return x, nil
	}
	return MemcachedOpsRequestType(""), fmt.Errorf("%s is %w", name, ErrInvalidMemcachedOpsRequestType)
}

// MustParseMemcachedOpsRequestType converts a string to a MemcachedOpsRequestType, and panics if is not valid.
func MustParseMemcachedOpsRequestType(name string) MemcachedOpsRequestType {
	val, err := ParseMemcachedOpsRequestType(name)
	if err != nil {
		panic(err)
	}
	return val
}
