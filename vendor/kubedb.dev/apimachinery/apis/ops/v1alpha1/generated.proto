/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kubedb.dev.apimachinery.apis.ops.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/client-go/api/v1/generated.proto";
import "kmodules.xyz/offshoot-api/api/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// ConfigNode is the spec for mongodb ConfigServer
message ConfigNode {
  optional int32 replicas = 1;
}

message ElasticsearchCustomConfiguration {
  optional k8s.io.api.core.v1.LocalObjectReference configMap = 1;

  map<string, string> data = 2;

  optional bool remove = 3;
}

// ElasticsearchCustomConfigurationSpec is the spec for Reconfiguring the Elasticsearch Settings
message ElasticsearchCustomConfigurationSpec {
  // ConfigSecret is an optional field to provide custom configuration file for database.
  // +optional
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 1;

  // SecureConfigSecret is an optional field to provide secure settings for database.
  // 	- Ref: https://www.elastic.co/guide/en/elasticsearch/reference/7.14/secure-settings.html
  // +optional
  optional k8s.io.api.core.v1.LocalObjectReference secureConfigSecret = 2;

  // ApplyConfig is an optional field to provide Elasticsearch configuration.
  // Provided configuration will be applied to config files stored in ConfigSecret.
  // If the ConfigSecret is missing, the operator will create a new k8s secret by the
  // following naming convention: {db-name}-user-config .
  // Expected input format:
  // 	applyConfig:
  // 		file-name.yml: |
  // 			key: value
  // 		elasticsearch.yml: |
  // 			thread_pool:
  // 				write:
  // 					size: 30
  // +optional
  map<string, string> applyConfig = 3;

  // If set to "true", the user provided configuration will be removed.
  // The Elasticsearch cluster will start will default configuration that is generated by the operator.
  // +optional
  optional bool removeCustomConfig = 4;

  // If set to "true", the user provided secure settings will be removed.
  // The elasticsearch.keystore will start will default password (i.e. "").
  // +optional
  optional bool removeSecureCustomConfig = 5;
}

// ElasticsearchHorizontalScalingSpec contains the horizontal scaling information of an Elasticsearch cluster
message ElasticsearchHorizontalScalingSpec {
  // Number of combined (i.e. master, data, ingest) node
  optional int32 node = 1;

  // Node topology specification
  optional ElasticsearchHorizontalScalingTopologySpec topology = 2;
}

// ElasticsearchHorizontalScalingTopologySpec contains the horizontal scaling information in cluster topology mode
message ElasticsearchHorizontalScalingTopologySpec {
  // Number of master nodes
  optional int32 master = 1;

  // Number of ingest nodes
  optional int32 ingest = 2;

  // Number of data nodes
  optional int32 data = 3;

  optional int32 dataContent = 4;

  optional int32 dataHot = 5;

  optional int32 dataWarm = 6;

  optional int32 dataCold = 7;

  optional int32 dataFrozen = 8;

  optional int32 ml = 9;

  optional int32 transform = 10;

  optional int32 coordinating = 11;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=elasticsearchopsrequests,singular=elasticsearchopsrequest,shortName=esops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message ElasticsearchOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ElasticsearchOpsRequestSpec spec = 2;

  optional ElasticsearchOpsRequestStatus status = 3;
}

// ElasticsearchOpsRequestList is a list of ElasticsearchOpsRequests
message ElasticsearchOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of ElasticsearchOpsRequest CRD objects
  repeated ElasticsearchOpsRequest items = 2;
}

// ElasticsearchOpsRequestSpec is the spec for ElasticsearchOpsRequest
message ElasticsearchOpsRequestSpec {
  // Specifies the Elasticsearch reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading Elasticsearch
  optional ElasticsearchUpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional ElasticsearchHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional ElasticsearchVerticalScalingSpec verticalScaling = 5;

  // Specifies information necessary for volume expansion
  optional ElasticsearchVolumeExpansionSpec volumeExpansion = 6;

  // Specifies information necessary for custom configuration of Elasticsearch
  optional ElasticsearchCustomConfigurationSpec configuration = 7;

  // Specifies information necessary for configuring TLS
  optional TLSSpec tls = 8;

  // Specifies information necessary for restarting database
  optional RestartSpec restart = 9;

  // Timeout for each step of the ops request in second. If a step doesn't finish within the specified timeout, the ops request will result in failure.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration timeout = 10;
}

// ElasticsearchOpsRequestStatus is the status for ElasticsearchOpsRequest
message ElasticsearchOpsRequestStatus {
  // Specifies the current phase of the ops request
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message ElasticsearchUpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;
}

// ElasticsearchVerticalScalingSpec is the spec for Elasticsearch vertical scaling
message ElasticsearchVerticalScalingSpec {
  // Resource spec for combined nodes
  optional k8s.io.api.core.v1.ResourceRequirements node = 1;

  // Resource spec for exporter sidecar
  optional k8s.io.api.core.v1.ResourceRequirements exporter = 2;

  // Specifies the resource spec for cluster in topology mode
  optional ElasticsearchVerticalScalingTopologySpec topology = 3;
}

// ElasticsearchVerticalScalingTopologySpec is the resource spec in the cluster topology mode
message ElasticsearchVerticalScalingTopologySpec {
  optional k8s.io.api.core.v1.ResourceRequirements master = 1;

  optional k8s.io.api.core.v1.ResourceRequirements ingest = 2;

  optional k8s.io.api.core.v1.ResourceRequirements data = 3;

  optional k8s.io.api.core.v1.ResourceRequirements dataContent = 4;

  optional k8s.io.api.core.v1.ResourceRequirements dataHot = 5;

  optional k8s.io.api.core.v1.ResourceRequirements dataWarm = 6;

  optional k8s.io.api.core.v1.ResourceRequirements dataCold = 7;

  optional k8s.io.api.core.v1.ResourceRequirements dataFrozen = 8;

  optional k8s.io.api.core.v1.ResourceRequirements ml = 9;

  optional k8s.io.api.core.v1.ResourceRequirements transform = 10;

  optional k8s.io.api.core.v1.ResourceRequirements coordinating = 11;
}

// ElasticsearchVolumeExpansionSpec is the spec for Elasticsearch volume expansion
message ElasticsearchVolumeExpansionSpec {
  // volume specification for combined nodes
  optional k8s.io.apimachinery.pkg.api.resource.Quantity node = 1;

  // volume specification for nodes in cluster topology
  optional ElasticsearchVolumeExpansionTopologySpec topology = 2;
}

// ElasticsearchVolumeExpansionTopologySpec is the spec for Elasticsearch volume expansion in topology mode
message ElasticsearchVolumeExpansionTopologySpec {
  // volume specification for master nodes
  optional k8s.io.apimachinery.pkg.api.resource.Quantity master = 1;

  // volume specification for ingest nodes
  optional k8s.io.apimachinery.pkg.api.resource.Quantity ingest = 2;

  // volume specification for data nodes
  optional k8s.io.apimachinery.pkg.api.resource.Quantity data = 3;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity dataContent = 4;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity dataHot = 5;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity dataWarm = 6;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity dataCold = 7;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity dataFrozen = 8;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity ml = 9;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity transform = 10;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity coordinating = 11;
}

message EtcdCustomConfiguration {
  optional k8s.io.api.core.v1.LocalObjectReference configMap = 1;

  map<string, string> data = 2;

  optional bool remove = 3;
}

message EtcdCustomConfigurationSpec {
}

// HorizontalScaling is the spec for Etcd horizontal scaling
message EtcdHorizontalScalingSpec {
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=etcdopsrequests,singular=etcdopsrequest,shortName=etcdops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message EtcdOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EtcdOpsRequestSpec spec = 2;

  optional EtcdOpsRequestStatus status = 3;
}

// EtcdOpsRequestList is a list of EtcdOpsRequests
message EtcdOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of EtcdOpsRequest CRD objects
  repeated EtcdOpsRequest items = 2;
}

// EtcdOpsRequestSpec is the spec for EtcdOpsRequest
message EtcdOpsRequestSpec {
  // Specifies the Etcd reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading Etcd
  optional EtcdUpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional EtcdHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional EtcdVerticalScalingSpec verticalScaling = 5;

  // Specifies information necessary for volume expansion
  optional EtcdVolumeExpansionSpec volumeExpansion = 6;

  // Specifies information necessary for custom configuration of Etcd
  optional EtcdCustomConfigurationSpec configuration = 7;

  // Specifies information necessary for configuring TLS
  optional TLSSpec tls = 8;

  // Specifies information necessary for restarting database
  optional RestartSpec restart = 9;
}

// EtcdOpsRequestStatus is the status for EtcdOpsRequest
message EtcdOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// EtcdReplicaReadinessCriteria is the criteria for checking readiness of a Etcd pod
// after updating, horizontal scaling etc.
message EtcdReplicaReadinessCriteria {
}

message EtcdUpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;

  optional EtcdReplicaReadinessCriteria readinessCriteria = 2;
}

// EtcdVerticalScalingSpec is the spec for Etcd vertical scaling
message EtcdVerticalScalingSpec {
  optional EtcdReplicaReadinessCriteria readinessCriteria = 1;
}

// EtcdVolumeExpansionSpec is the spec for Etcd volume expansion
message EtcdVolumeExpansionSpec {
}

message MariaDBCustomConfiguration {
  optional k8s.io.api.core.v1.LocalObjectReference configMap = 1;

  map<string, string> data = 2;

  optional bool remove = 3;
}

message MariaDBCustomConfigurationSpec {
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 1;

  optional string inlineConfig = 2;

  optional bool removeCustomConfig = 3;
}

message MariaDBHorizontalScalingSpec {
  // Number of nodes/members of the group
  optional int32 member = 1;

  // specifies the weight of the current member/Node
  optional int32 memberWeight = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mariadbopsrequests,singular=mariadbopsrequest,shortName=mariaops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MariaDBOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MariaDBOpsRequestSpec spec = 2;

  optional MariaDBOpsRequestStatus status = 3;
}

// MariaDBOpsRequestList is a list of MariaDBOpsRequests
message MariaDBOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MariaDBOpsRequest CRD objects
  repeated MariaDBOpsRequest items = 2;
}

// MariaDBOpsRequestSpec is the spec for MariaDBOpsRequest
message MariaDBOpsRequestSpec {
  // Specifies the MariaDB reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading MariaDB
  optional MariaDBUpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional MariaDBHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional MariaDBVerticalScalingSpec verticalScaling = 5;

  // Specifies information necessary for volume expansion
  optional MariaDBVolumeExpansionSpec volumeExpansion = 6;

  // Specifies information necessary for custom configuration of MariaDB
  optional MariaDBCustomConfigurationSpec configuration = 7;

  // Specifies information necessary for configuring TLS
  optional MariaDBTLSSpec tls = 8;

  // Specifies information necessary for restarting database
  optional RestartSpec restart = 9;

  // Timeout for each step of the ops request in second. If a step doesn't finish within the specified timeout, the ops request will result in failure.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration timeout = 10;
}

// MariaDBOpsRequestStatus is the status for MariaDBOpsRequest
message MariaDBOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message MariaDBTLSSpec {
  optional TLSSpec tLSSpec = 1;

  // Indicates that the database server need to be encrypted connections(ssl)
  // +optional
  optional bool requireSSL = 2;
}

message MariaDBUpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;
}

message MariaDBVerticalScalingSpec {
  optional k8s.io.api.core.v1.ResourceRequirements mariadb = 1;

  optional k8s.io.api.core.v1.ResourceRequirements exporter = 2;

  optional k8s.io.api.core.v1.ResourceRequirements coordinator = 3;
}

// MariaDBVolumeExpansionSpec is the spec for MariaDB volume expansion
message MariaDBVolumeExpansionSpec {
  optional k8s.io.apimachinery.pkg.api.resource.Quantity mariadb = 1;
}

message MemcachedCustomConfiguration {
  optional k8s.io.api.core.v1.LocalObjectReference configMap = 1;

  map<string, string> data = 2;

  optional bool remove = 3;
}

message MemcachedCustomConfigurationSpec {
}

// HorizontalScaling is the spec for Memcached horizontal scaling
message MemcachedHorizontalScalingSpec {
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=memcachedopsrequests,singular=memcachedopsrequest,shortName=mcops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MemcachedOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MemcachedOpsRequestSpec spec = 2;

  optional MemcachedOpsRequestStatus status = 3;
}

// MemcachedOpsRequestList is a list of MemcachedOpsRequests
message MemcachedOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MemcachedOpsRequest CRD objects
  repeated MemcachedOpsRequest items = 2;
}

// MemcachedOpsRequestSpec is the spec for MemcachedOpsRequest
message MemcachedOpsRequestSpec {
  // Specifies the Memcached reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading Memcached
  optional MemcachedUpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional MemcachedHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional MemcachedVerticalScalingSpec verticalScaling = 5;

  // Specifies information necessary for volume expansion
  optional MemcachedVolumeExpansionSpec volumeExpansion = 6;

  // Specifies information necessary for custom configuration of Memcached
  optional MemcachedCustomConfigurationSpec configuration = 7;

  // Specifies information necessary for configuring TLS
  optional TLSSpec tls = 8;

  // Specifies information necessary for restarting database
  optional RestartSpec restart = 9;
}

// MemcachedOpsRequestStatus is the status for MemcachedOpsRequest
message MemcachedOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// MemcachedReplicaReadinessCriteria is the criteria for checking readiness of a Memcached pod
// after updating, horizontal scaling etc.
message MemcachedReplicaReadinessCriteria {
}

message MemcachedUpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;

  optional MemcachedReplicaReadinessCriteria readinessCriteria = 2;
}

// MemcachedVerticalScalingSpec is the spec for Memcached vertical scaling
message MemcachedVerticalScalingSpec {
  optional MemcachedReplicaReadinessCriteria readinessCriteria = 1;
}

// MemcachedVolumeExpansionSpec is the spec for Memcached volume expansion
message MemcachedVolumeExpansionSpec {
}

message MongoDBCustomConfiguration {
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 2;

  // Deprecated
  optional string inlineConfig = 3;

  map<string, string> applyConfig = 5;

  optional bool removeCustomConfig = 4;
}

message MongoDBCustomConfigurationSpec {
  optional MongoDBCustomConfiguration standalone = 1;

  optional MongoDBCustomConfiguration replicaSet = 5;

  optional MongoDBCustomConfiguration mongos = 2;

  optional MongoDBCustomConfiguration configServer = 3;

  optional MongoDBCustomConfiguration shard = 4;
}

// HorizontalScaling is the spec for mongodb horizontal scaling
message MongoDBHorizontalScalingSpec {
  optional MongoDBShardNode shard = 1;

  optional ConfigNode configServer = 2;

  optional MongosNode mongos = 3;

  optional int32 replicas = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mongodbopsrequests,singular=mongodbopsrequest,shortName=mgops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MongoDBOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MongoDBOpsRequestSpec spec = 2;

  optional MongoDBOpsRequestStatus status = 3;
}

// MongoDBOpsRequestList is a list of MongoDBOpsRequests
message MongoDBOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MongoDBOpsRequest CRD objects
  repeated MongoDBOpsRequest items = 2;
}

// MongoDBOpsRequestSpec is the spec for MongoDBOpsRequest
message MongoDBOpsRequestSpec {
  // Specifies the MongoDB reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading mongodb
  optional MongoDBUpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional MongoDBHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional MongoDBVerticalScalingSpec verticalScaling = 5;

  // Specifies information necessary for volume expansion
  optional MongoDBVolumeExpansionSpec volumeExpansion = 6;

  // Specifies information necessary for custom configuration of MongoDB
  optional MongoDBCustomConfigurationSpec configuration = 7;

  // Specifies information necessary for configuring TLS
  optional TLSSpec tls = 8;

  // Specifies information necessary for restarting database
  optional RestartSpec restart = 9;

  // Specifies the Readiness Criteria
  optional MongoDBReplicaReadinessCriteria readinessCriteria = 10;

  // Timeout for each step of the ops request in second. If a step doesn't finish within the specified timeout, the ops request will result in failure.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration timeout = 11;
}

// MongoDBOpsRequestStatus is the status for MongoDBOpsRequest
message MongoDBOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// MongoDBReplicaReadinessCriteria is the criteria for checking readiness of a MongoDB pod
// after restarting the pod
message MongoDBReplicaReadinessCriteria {
  // +kubebuilder:validation:Minimum:=0
  optional int32 oplogMaxLagSeconds = 1;

  // +kubebuilder:validation:Minimum:=0
  // +kubebuilder:validation:Maximum:=100
  optional int32 objectsCountDiffPercentage = 2;
}

// MongoDBShardNode is the spec for mongodb Shard
message MongoDBShardNode {
  optional int32 shards = 1;

  optional int32 replicas = 2;
}

message MongoDBUpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;
}

// MongoDBVerticalScalingSpec is the spec for mongodb vertical scaling
message MongoDBVerticalScalingSpec {
  optional k8s.io.api.core.v1.ResourceRequirements standalone = 1;

  optional k8s.io.api.core.v1.ResourceRequirements replicaSet = 2;

  optional k8s.io.api.core.v1.ResourceRequirements mongos = 3;

  optional k8s.io.api.core.v1.ResourceRequirements configServer = 4;

  optional k8s.io.api.core.v1.ResourceRequirements shard = 5;

  optional k8s.io.api.core.v1.ResourceRequirements exporter = 6;

  optional k8s.io.api.core.v1.ResourceRequirements coordinator = 7;
}

// MongoDBVolumeExpansionSpec is the spec for mongodb volume expansion
message MongoDBVolumeExpansionSpec {
  // +kubebuilder:default:="Online"
  optional string mode = 5;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity standalone = 1;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity replicaSet = 4;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity configServer = 2;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity shard = 3;
}

// MongosNode is the spec for mongodb Mongos
message MongosNode {
  optional int32 replicas = 1;
}

message MySQLCustomConfigurationSpec {
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 2;

  optional string inlineConfig = 3;

  optional bool removeCustomConfig = 4;
}

message MySQLHorizontalScalingSpec {
  // Number of nodes/members of the group
  optional int32 member = 1;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mysqlopsrequests,singular=mysqlopsrequest,shortName=myops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MySQLOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MySQLOpsRequestSpec spec = 2;

  optional MySQLOpsRequestStatus status = 3;
}

// MySQLOpsRequestList is a list of MySQLOpsRequests
message MySQLOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MySQLOpsRequest CRD objects
  repeated MySQLOpsRequest items = 2;
}

// MySQLOpsRequestSpec is the spec for MySQLOpsRequest
message MySQLOpsRequestSpec {
  // Specifies the MySQL reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading MySQL
  optional MySQLUpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional MySQLHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional MySQLVerticalScalingSpec verticalScaling = 5;

  // Specifies information necessary for volume expansion
  optional MySQLVolumeExpansionSpec volumeExpansion = 6;

  // Specifies information necessary for custom configuration of MySQL
  optional MySQLCustomConfigurationSpec configuration = 7;

  // Specifies information necessary for configuring TLS
  optional MySQLTLSSpec tls = 8;

  // Specifies information necessary for restarting database
  optional RestartSpec restart = 9;
}

// MySQLOpsRequestStatus is the status for MySQLOpsRequest
message MySQLOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// MySQLReplicaReadinessCriteria is the criteria for checking readiness of a MySQL pod
// after updating, horizontal scaling etc.
message MySQLReplicaReadinessCriteria {
}

message MySQLTLSSpec {
  optional TLSSpec tLSSpec = 1;

  // Indicates that the database server need to be encrypted connections(ssl)
  // +optional
  optional bool requireSSL = 2;
}

message MySQLUpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;

  optional MySQLReplicaReadinessCriteria readinessCriteria = 2;
}

message MySQLVerticalScalingSpec {
  optional k8s.io.api.core.v1.ResourceRequirements mysql = 1;

  optional k8s.io.api.core.v1.ResourceRequirements exporter = 2;

  optional k8s.io.api.core.v1.ResourceRequirements coordinator = 3;
}

// MySQLVolumeExpansionSpec is the spec for MySQL volume expansion
message MySQLVolumeExpansionSpec {
  optional k8s.io.apimachinery.pkg.api.resource.Quantity mysql = 1;
}

message PerconaXtraDBCustomConfiguration {
  optional k8s.io.api.core.v1.LocalObjectReference configMap = 1;

  map<string, string> data = 2;

  optional bool remove = 3;
}

message PerconaXtraDBCustomConfigurationSpec {
}

// HorizontalScaling is the spec for PerconaXtraDB horizontal scaling
message PerconaXtraDBHorizontalScalingSpec {
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=perconaxtradbopsrequests,singular=perconaxtradbopsrequest,shortName=pxcops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PerconaXtraDBOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PerconaXtraDBOpsRequestSpec spec = 2;

  optional PerconaXtraDBOpsRequestStatus status = 3;
}

// PerconaXtraDBOpsRequestList is a list of PerconaXtraDBOpsRequests
message PerconaXtraDBOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PerconaXtraDBOpsRequest CRD objects
  repeated PerconaXtraDBOpsRequest items = 2;
}

// PerconaXtraDBOpsRequestSpec is the spec for PerconaXtraDBOpsRequest
message PerconaXtraDBOpsRequestSpec {
  // Specifies the PerconaXtraDB reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading PerconaXtraDB
  optional PerconaXtraDBUpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional PerconaXtraDBHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional PerconaXtraDBVerticalScalingSpec verticalScaling = 5;

  // Specifies information necessary for volume expansion
  optional PerconaXtraDBVolumeExpansionSpec volumeExpansion = 6;

  // Specifies information necessary for custom configuration of PerconaXtraDB
  optional PerconaXtraDBCustomConfigurationSpec configuration = 7;

  // Specifies information necessary for configuring TLS
  optional TLSSpec tls = 8;

  // Specifies information necessary for restarting database
  optional RestartSpec restart = 9;
}

// PerconaXtraDBOpsRequestStatus is the status for PerconaXtraDBOpsRequest
message PerconaXtraDBOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// PerconaXtraDBReplicaReadinessCriteria is the criteria for checking readiness of a PerconaXtraDB pod
// after updating, horizontal scaling etc.
message PerconaXtraDBReplicaReadinessCriteria {
}

message PerconaXtraDBUpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;

  optional PerconaXtraDBReplicaReadinessCriteria readinessCriteria = 2;
}

// PerconaXtraDBVerticalScalingSpec is the spec for PerconaXtraDB vertical scaling
message PerconaXtraDBVerticalScalingSpec {
  optional PerconaXtraDBReplicaReadinessCriteria readinessCriteria = 1;
}

// PerconaXtraDBVolumeExpansionSpec is the spec for PerconaXtraDB volume expansion
message PerconaXtraDBVolumeExpansionSpec {
}

message PgBouncerCustomConfiguration {
  optional k8s.io.api.core.v1.LocalObjectReference configMap = 1;

  map<string, string> data = 2;

  optional bool remove = 3;
}

message PgBouncerCustomConfigurationSpec {
}

// HorizontalScaling is the spec for PgBouncer horizontal scaling
message PgBouncerHorizontalScalingSpec {
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=pgbounceropsrequests,singular=pgbounceropsrequest,shortName=pbops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PgBouncerOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PgBouncerOpsRequestSpec spec = 2;

  optional PgBouncerOpsRequestStatus status = 3;
}

// PgBouncerOpsRequestList is a list of PgBouncerOpsRequests
message PgBouncerOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PgBouncerOpsRequest CRD objects
  repeated PgBouncerOpsRequest items = 2;
}

// PgBouncerOpsRequestSpec is the spec for PgBouncerOpsRequest
message PgBouncerOpsRequestSpec {
  // Specifies the PgBouncer reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading PgBouncer
  optional PgBouncerUpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional PgBouncerHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional PgBouncerVerticalScalingSpec verticalScaling = 5;

  // Specifies information necessary for volume expansion
  optional PgBouncerVolumeExpansionSpec volumeExpansion = 6;

  // Specifies information necessary for custom configuration of PgBouncer
  optional PgBouncerCustomConfigurationSpec configuration = 7;

  // Specifies information necessary for configuring TLS
  optional TLSSpec tls = 8;

  // Specifies information necessary for restarting database
  optional RestartSpec restart = 9;
}

// PgBouncerOpsRequestStatus is the status for PgBouncerOpsRequest
message PgBouncerOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// PgBouncerReplicaReadinessCriteria is the criteria for checking readiness of a PgBouncer pod
// after updating, horizontal scaling etc.
message PgBouncerReplicaReadinessCriteria {
}

message PgBouncerUpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;

  optional PgBouncerReplicaReadinessCriteria readinessCriteria = 2;
}

// PgBouncerVerticalScalingSpec is the spec for PgBouncer vertical scaling
message PgBouncerVerticalScalingSpec {
  optional PgBouncerReplicaReadinessCriteria readinessCriteria = 1;
}

// PgBouncerVolumeExpansionSpec is the spec for PgBouncer volume expansion
message PgBouncerVolumeExpansionSpec {
}

message PostgresCustomConfiguration {
  optional k8s.io.api.core.v1.LocalObjectReference configMap = 1;

  map<string, string> data = 2;

  optional bool remove = 3;
}

message PostgresCustomConfigurationSpec {
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 2;

  optional string inlineConfig = 3;

  optional bool removeCustomConfig = 4;
}

// HorizontalScaling is the spec for Postgres horizontal scaling
message PostgresHorizontalScalingSpec {
  optional int32 replicas = 1;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=postgresopsrequests,singular=postgresopsrequest,shortName=pgops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PostgresOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PostgresOpsRequestSpec spec = 2;

  optional PostgresOpsRequestStatus status = 3;
}

// PostgresOpsRequestList is a list of PostgresOpsRequests
message PostgresOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PostgresOpsRequest CRD objects
  repeated PostgresOpsRequest items = 2;
}

// PostgresOpsRequestSpec is the spec for PostgresOpsRequest
message PostgresOpsRequestSpec {
  // Specifies the Postgres reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading Postgres
  optional PostgresUpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional PostgresHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional PostgresVerticalScalingSpec verticalScaling = 5;

  // Specifies information necessary for volume expansion
  optional PostgresVolumeExpansionSpec volumeExpansion = 6;

  // Specifies information necessary for custom configuration of Postgres
  optional PostgresCustomConfigurationSpec configuration = 7;

  // Specifies information necessary for configuring TLS
  optional PostgresTLSSpec tls = 8;

  // Specifies information necessary for restarting database
  optional RestartSpec restart = 9;

  // Timeout for each step of the ops request in second. If a step doesn't finish within the specified timeout, the ops request will result in failure.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration timeout = 10;
}

// PostgresOpsRequestStatus is the status for PostgresOpsRequest
message PostgresOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message PostgresTLSSpec {
  optional TLSSpec tLSSpec = 1;

  // SSLMode for both standalone and clusters. [disable;allow;prefer;require;verify-ca;verify-full]
  // +optional
  optional string sslMode = 2;

  // ClientAuthMode for sidecar or sharding. (default will be md5. [md5;scram;cert])
  // +optional
  optional string clientAuthMode = 3;
}

message PostgresUpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;
}

// PostgresVerticalScalingSpec is the spec for Postgres vertical scaling
message PostgresVerticalScalingSpec {
  optional k8s.io.api.core.v1.ResourceRequirements postgres = 1;

  optional k8s.io.api.core.v1.ResourceRequirements exporter = 2;

  optional k8s.io.api.core.v1.ResourceRequirements coordinator = 3;
}

// PostgresVolumeExpansionSpec is the spec for Postgres volume expansion
message PostgresVolumeExpansionSpec {
  // volume specification for Postgres
  optional k8s.io.apimachinery.pkg.api.resource.Quantity postgres = 1;
}

message ProxySQLCustomConfiguration {
  optional k8s.io.api.core.v1.LocalObjectReference configMap = 1;

  map<string, string> data = 2;

  optional bool remove = 3;
}

message ProxySQLCustomConfigurationSpec {
}

// HorizontalScaling is the spec for ProxySQL horizontal scaling
message ProxySQLHorizontalScalingSpec {
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=proxysqlopsrequests,singular=proxysqlopsrequest,shortName=proxyops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message ProxySQLOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ProxySQLOpsRequestSpec spec = 2;

  optional ProxySQLOpsRequestStatus status = 3;
}

// ProxySQLOpsRequestList is a list of ProxySQLOpsRequests
message ProxySQLOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of ProxySQLOpsRequest CRD objects
  repeated ProxySQLOpsRequest items = 2;
}

// ProxySQLOpsRequestSpec is the spec for ProxySQLOpsRequest
message ProxySQLOpsRequestSpec {
  // Specifies the ProxySQL reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading ProxySQL
  optional ProxySQLUpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional ProxySQLHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional ProxySQLVerticalScalingSpec verticalScaling = 5;

  // Specifies information necessary for volume expansion
  optional ProxySQLVolumeExpansionSpec volumeExpansion = 6;

  // Specifies information necessary for custom configuration of ProxySQL
  optional ProxySQLCustomConfigurationSpec configuration = 7;

  // Specifies information necessary for configuring TLS
  optional TLSSpec tls = 8;

  // Specifies information necessary for restarting database
  optional RestartSpec restart = 9;
}

// ProxySQLOpsRequestStatus is the status for ProxySQLOpsRequest
message ProxySQLOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// ProxySQLReplicaReadinessCriteria is the criteria for checking readiness of a ProxySQL pod
// after updating, horizontal scaling etc.
message ProxySQLReplicaReadinessCriteria {
}

message ProxySQLUpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;

  optional ProxySQLReplicaReadinessCriteria readinessCriteria = 2;
}

// ProxySQLVerticalScalingSpec is the spec for ProxySQL vertical scaling
message ProxySQLVerticalScalingSpec {
  optional ProxySQLReplicaReadinessCriteria readinessCriteria = 1;
}

// ProxySQLVolumeExpansionSpec is the spec for ProxySQL volume expansion
message ProxySQLVolumeExpansionSpec {
}

message RedisCustomConfigurationSpec {
  // PodTemplate is an optional configuration for pods used to expose database
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 1;

  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 2;

  optional string inlineConfig = 3;

  optional bool removeCustomConfig = 4;
}

message RedisHorizontalScalingSpec {
  // Number of Masters in the cluster
  optional int32 master = 1;

  // specifies the number of replica for the master
  optional int32 replicas = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=redisopsrequests,singular=redisopsrequest,shortName=rdops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message RedisOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RedisOpsRequestSpec spec = 2;

  optional RedisOpsRequestStatus status = 3;
}

// RedisOpsRequestList is a list of RedisOpsRequests
message RedisOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of RedisOpsRequest CRD objects
  repeated RedisOpsRequest items = 2;
}

// RedisOpsRequestSpec is the spec for RedisOpsRequest
message RedisOpsRequestSpec {
  // Specifies the Redis reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading Redis
  optional RedisUpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional RedisHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional RedisVerticalScalingSpec verticalScaling = 5;

  // Specifies information necessary for volume expansion
  optional RedisVolumeExpansionSpec volumeExpansion = 6;

  // Specifies information necessary for custom configuration of Redis
  optional RedisCustomConfigurationSpec configuration = 7;

  // Specifies information necessary for configuring TLS
  optional TLSSpec tls = 8;

  // Specifies information necessary for restarting database
  optional RestartSpec restart = 9;
}

// RedisOpsRequestStatus is the status for RedisOpsRequest
message RedisOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// RedisReplicaReadinessCriteria is the criteria for checking readiness of a Redis pod
// after updating, horizontal scaling etc.
message RedisReplicaReadinessCriteria {
}

message RedisUpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;

  optional RedisReplicaReadinessCriteria readinessCriteria = 2;
}

// RedisVerticalScalingSpec is the spec for Redis vertical scaling
message RedisVerticalScalingSpec {
  optional k8s.io.api.core.v1.ResourceRequirements redis = 1;

  optional k8s.io.api.core.v1.ResourceRequirements exporter = 2;

  optional k8s.io.api.core.v1.ResourceRequirements coordinator = 3;
}

// RedisVolumeExpansionSpec is the spec for Redis volume expansion
message RedisVolumeExpansionSpec {
  optional k8s.io.apimachinery.pkg.api.resource.Quantity redis = 1;
}

message RestartSpec {
}

message TLSSpec {
  // TLSConfig contains updated tls configurations for client and server.
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tLSConfig = 1;

  // RotateCertificates tells operator to initiate certificate rotation
  // +optional
  optional bool rotateCertificates = 2;

  // Remove tells operator to remove TLS configuration
  // +optional
  optional bool remove = 3;
}

