/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kubedb.dev.apimachinery.apis.catalog.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/custom-resources/apis/appcatalog/v1alpha1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message Allowlist {
  // List of all accepted versions for upgrade request of a Standalone server. empty indicates all accepted
  repeated string standalone = 1;

  // List of all accepted versions for upgrade request of a GroupReplication cluster. empty indicates all accepted
  repeated string groupReplication = 2;
}

message Denylist {
  // List of all rejected versions for upgrade request of a Standalone server
  repeated string standalone = 1;

  // List of all rejected versions for upgrade request of a GroupReplication cluster
  repeated string groupReplication = 2;
}

// ElasticsearchSecurityContext provides additional securityContext settings for the Elasticsearch Image
message ElasticsearchSecurityContext {
  // RunAsUser is default UID for the DB container. It defaults to 1000.
  optional int64 runAsUser = 1;

  // RunAsAnyNonRoot will be true if user can change the default UID to other than 1000.
  optional bool runAsAnyNonRoot = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=elasticsearchversions,singular=elasticsearchversion,scope=Cluster,shortName=esversion,categories={datastore,kubedb,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Distribution",type="string",JSONPath=".spec.distribution"
// +kubebuilder:printcolumn:name="DB_IMAGE",type="string",JSONPath=".spec.db.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message ElasticsearchVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ElasticsearchVersionSpec spec = 2;
}

// ElasticsearchVersionDatabase is the Elasticsearch Database image
message ElasticsearchVersionDatabase {
  optional string image = 1;
}

// ElasticsearchVersionExporter is the image for the Elasticsearch exporter
message ElasticsearchVersionExporter {
  optional string image = 1;
}

// ElasticsearchVersionInitContainer is the Elasticsearch Container initializer
message ElasticsearchVersionInitContainer {
  optional string image = 1;

  optional string yqImage = 2;
}

// ElasticsearchVersionList is a list of ElasticsearchVersions
message ElasticsearchVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of ElasticsearchVersion CRD objects
  repeated ElasticsearchVersion items = 2;
}

// ElasticsearchVersionPodSecurityPolicy is the Elasticsearch pod security policies
message ElasticsearchVersionPodSecurityPolicy {
  optional string databasePolicyName = 1;
}

// ElasticsearchVersionSpec is the spec for elasticsearch version
message ElasticsearchVersionSpec {
  // Version
  optional string version = 1;

  // Distribution
  optional string distribution = 2;

  // Authentication plugin used by Elasticsearch cluster
  optional string authPlugin = 3;

  // Database Image
  optional ElasticsearchVersionDatabase db = 4;

  // Exporter Image
  optional ElasticsearchVersionExporter exporter = 5;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 6;

  // Init container Image
  optional ElasticsearchVersionInitContainer initContainer = 7;

  // PSP names
  optional ElasticsearchVersionPodSecurityPolicy podSecurityPolicies = 8;

  // Stash defines backup and restore task definitions.
  // +optional
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.StashAddonSpec stash = 9;

  // SecurityContext is for the additional security information for the Elasticsearch container
  // +optional
  optional ElasticsearchSecurityContext securityContext = 10;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=etcdversions,singular=etcdversion,scope=Cluster,shortName=etcversion,categories={datastore,kubedb,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="DB_IMAGE",type="string",JSONPath=".spec.db.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message EtcdVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EtcdVersionSpec spec = 2;
}

// EtcdVersionDatabase is the Etcd Database image
message EtcdVersionDatabase {
  optional string image = 1;
}

// EtcdVersionExporter is the image for the Etcd exporter
message EtcdVersionExporter {
  optional string image = 1;
}

// EtcdVersionList is a list of EtcdVersions
message EtcdVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of EtcdVersion CRD objects
  repeated EtcdVersion items = 2;
}

// EtcdVersionSpec is the spec for postgres version
message EtcdVersionSpec {
  // Version
  optional string version = 1;

  // Database Image
  optional EtcdVersionDatabase db = 2;

  // Exporter Image
  optional EtcdVersionExporter exporter = 3;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 4;

  // Stash defines backup and restore task definitions.
  // +optional
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.StashAddonSpec stash = 5;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mariadbversions,singular=mariadbversion,scope=Cluster,shortName=mariaversion,categories={datastore,kubedb,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="DB_IMAGE",type="string",JSONPath=".spec.db.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MariaDBVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MariaDBVersionSpec spec = 2;
}

// MariaDBVersionCoordinator is the MariaDB Coordinator image
message MariaDBVersionCoordinator {
  optional string image = 1;
}

// MariaDBVersionDatabase is the mariadb image
message MariaDBVersionDatabase {
  optional string image = 1;
}

// MariaDBVersionExporter is the image for the MariaDB exporter
message MariaDBVersionExporter {
  optional string image = 1;
}

// MariaDBVersionInitContainer is the MariaDB Container initializer
message MariaDBVersionInitContainer {
  optional string image = 1;
}

// MariaDBVersionList is a list of MariaDBVersions
message MariaDBVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MariaDBVersion CRD objects
  repeated MariaDBVersion items = 2;
}

// MariaDBVersionPodSecurityPolicy is the MariaDB pod security policies
message MariaDBVersionPodSecurityPolicy {
  optional string databasePolicyName = 1;
}

// MariaDBVersionSpec is the spec for MariaDB version
message MariaDBVersionSpec {
  // Version
  optional string version = 1;

  // Database Image
  optional MariaDBVersionDatabase db = 2;

  // Exporter Image
  optional MariaDBVersionExporter exporter = 3;

  // Coordinator Image
  optional MariaDBVersionCoordinator coordinator = 4;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 5;

  // Init container Image
  // TODO: remove if not needed
  optional MariaDBVersionInitContainer initContainer = 6;

  // PSP names
  optional MariaDBVersionPodSecurityPolicy podSecurityPolicies = 7;

  // Stash defines backup and restore task definitions.
  // +optional
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.StashAddonSpec stash = 8;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=memcachedversions,singular=memcachedversion,scope=Cluster,shortName=mcversion,categories={datastore,kubedb,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="DB_IMAGE",type="string",JSONPath=".spec.db.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MemcachedVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MemcachedVersionSpec spec = 2;
}

// MemcachedVersionDatabase is the Memcached Database image
message MemcachedVersionDatabase {
  optional string image = 1;
}

// MemcachedVersionExporter is the image for the Memcached exporter
message MemcachedVersionExporter {
  optional string image = 1;
}

// MemcachedVersionList is a list of MemcachedVersions
message MemcachedVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MemcachedVersion CRD objects
  repeated MemcachedVersion items = 2;
}

// MemcachedVersionPodSecurityPolicy is the Memcached pod security policies
message MemcachedVersionPodSecurityPolicy {
  optional string databasePolicyName = 1;
}

// MemcachedVersionSpec is the spec for memcached version
message MemcachedVersionSpec {
  // Version
  optional string version = 1;

  // Database Image
  optional MemcachedVersionDatabase db = 2;

  // Exporter Image
  optional MemcachedVersionExporter exporter = 3;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 4;

  // PSP names
  optional MemcachedVersionPodSecurityPolicy podSecurityPolicies = 5;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mongodbversions,singular=mongodbversion,scope=Cluster,shortName=mgversion,categories={datastore,kubedb,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Distribution",type="string",JSONPath=".spec.distribution"
// +kubebuilder:printcolumn:name="DB_IMAGE",type="string",JSONPath=".spec.db.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MongoDBVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MongoDBVersionSpec spec = 2;
}

// MongoDBVersionDatabase is the MongoDB Database image
message MongoDBVersionDatabase {
  optional string image = 1;
}

// MongoDBVersionExporter is the image for the MongoDB exporter
message MongoDBVersionExporter {
  optional string image = 1;
}

// MongoDBVersionInitContainer is the Elasticsearch Container initializer
message MongoDBVersionInitContainer {
  optional string image = 1;
}

// MongoDBVersionList is a list of MongoDBVersions
message MongoDBVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MongoDBVersion CRD objects
  repeated MongoDBVersion items = 2;
}

// MongoDBVersionPodSecurityPolicy is the MongoDB pod security policies
message MongoDBVersionPodSecurityPolicy {
  optional string databasePolicyName = 1;
}

// MongoDBVersionSpec is the spec for mongodb version
message MongoDBVersionSpec {
  // Version
  optional string version = 1;

  // Distribution
  optional string distribution = 2;

  // Database Image
  optional MongoDBVersionDatabase db = 3;

  // Exporter Image
  optional MongoDBVersionExporter exporter = 4;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 5;

  // Init container Image
  optional MongoDBVersionInitContainer initContainer = 6;

  // PSP names
  optional MongoDBVersionPodSecurityPolicy podSecurityPolicies = 7;

  // ReplicationModeDetector Image
  optional ReplicationModeDetector replicationModeDetector = 8;

  // Stash defines backup and restore task definitions.
  // +optional
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.StashAddonSpec stash = 9;
}

message MySQLUpgradeConstraints {
  // List of all accepted versions for uprade request
  optional Allowlist allowlist = 1;

  // List of all rejected versions for uprade request
  optional Denylist denylist = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mysqlversions,singular=mysqlversion,scope=Cluster,shortName=myversion,categories={datastore,kubedb,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Distribution",type="string",JSONPath=".spec.distribution"
// +kubebuilder:printcolumn:name="DB_IMAGE",type="string",JSONPath=".spec.db.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MySQLVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MySQLVersionSpec spec = 2;
}

// MySQLVersionCoordinator is the image for coordinator
message MySQLVersionCoordinator {
  optional string image = 1;
}

// MySQLVersionDatabase is the MySQL Database image
message MySQLVersionDatabase {
  optional string image = 1;
}

// MySQLVersionExporter is the image for the MySQL exporter
message MySQLVersionExporter {
  optional string image = 1;
}

// MySQLVersionInitContainer is the MySQL Container initializer
message MySQLVersionInitContainer {
  optional string image = 1;
}

// MySQLVersionList is a list of MySQLVersions
message MySQLVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MySQLVersion CRD objects
  repeated MySQLVersion items = 2;
}

// MySQLVersionPodSecurityPolicy is the MySQL pod security policies
message MySQLVersionPodSecurityPolicy {
  optional string databasePolicyName = 1;
}

// MySQLVersionRouter is the MySQL Router lightweight middleware
// that provides transparent routing between your application and back-end MySQL Servers
message MySQLVersionRouter {
  optional string image = 1;
}

// MySQLVersionRouterInitContainer is mysql router init container
message MySQLVersionRouterInitContainer {
  optional string image = 1;
}

// MySQLVersionSpec is the spec for MySQL version
message MySQLVersionSpec {
  // Version
  optional string version = 1;

  // Distribution
  optional string distribution = 2;

  // Database Image
  optional MySQLVersionDatabase db = 3;

  // Exporter Image
  optional MySQLVersionExporter exporter = 4;

  // Coordinator Image
  // +optional
  optional MySQLVersionCoordinator coordinator = 13;

  // ReplicationModeDetector Image
  // +optional
  optional ReplicationModeDetector replicationModeDetector = 5;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 6;

  // Init container Image
  optional MySQLVersionInitContainer initContainer = 7;

  // PSP names
  optional MySQLVersionPodSecurityPolicy podSecurityPolicies = 8;

  // upgrade constraints
  optional MySQLUpgradeConstraints upgradeConstraints = 9;

  // Stash defines backup and restore task definitions.
  // +optional
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.StashAddonSpec stash = 10;

  // Router image
  // +optional
  optional MySQLVersionRouter router = 11;

  // +optional
  optional MySQLVersionRouterInitContainer routerInitContainer = 12;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=perconaxtradbversions,singular=perconaxtradbversion,scope=Cluster,shortName=pxversion,categories={datastore,kubedb,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="DB_IMAGE",type="string",JSONPath=".spec.db.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PerconaXtraDBVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PerconaXtraDBVersionSpec spec = 2;
}

// PerconaXtraDBVersionDatabase is the perconaxtradb image
message PerconaXtraDBVersionDatabase {
  optional string image = 1;
}

// PerconaXtraDBVersionExporter is the image for the PerconaXtraDB exporter
message PerconaXtraDBVersionExporter {
  optional string image = 1;
}

// PerconaXtraDBVersionInitContainer is the PerconaXtraDB Container initializer
message PerconaXtraDBVersionInitContainer {
  optional string image = 1;
}

// PerconaXtraDBVersionList is a list of PerconaXtraDBVersions
message PerconaXtraDBVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PerconaXtraDBVersion CRD objects
  repeated PerconaXtraDBVersion items = 2;
}

// PerconaXtraDBVersionPodSecurityPolicy is the PerconaXtraDB pod security policies
message PerconaXtraDBVersionPodSecurityPolicy {
  optional string databasePolicyName = 1;
}

// PerconaXtraDBVersionSpec is the spec for PerconaXtraDB version
message PerconaXtraDBVersionSpec {
  // Version
  optional string version = 1;

  // Database Image
  optional PerconaXtraDBVersionDatabase db = 2;

  // Exporter Image
  optional PerconaXtraDBVersionExporter exporter = 3;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 4;

  // Init container Image
  // TODO: remove if not needed
  optional PerconaXtraDBVersionInitContainer initContainer = 5;

  // PSP names
  optional PerconaXtraDBVersionPodSecurityPolicy podSecurityPolicies = 6;

  // Stash defines backup and restore task definitions.
  // +optional
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.StashAddonSpec stash = 7;
}

// PgBouncerServerVersion is the PgBouncer Database image
message PgBouncerServerVersion {
  optional string image = 1;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=pgbouncerversions,singular=pgbouncerversion,scope=Cluster,shortName=pbversion,categories={datastore,kubedb,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="SERVER_IMAGE",type="string",JSONPath=".spec.server.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PgBouncerVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PgBouncerVersionSpec spec = 2;
}

// PostgresVersionExporter is the image for the Postgres exporter
message PgBouncerVersionExporter {
  optional string image = 1;
}

// PgBouncerVersionList is a list of PgBouncerVersions
message PgBouncerVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PgBouncerVersion CRD objects
  repeated PgBouncerVersion items = 2;
}

// PgBouncerVersionSpec is the spec for pgbouncer version
message PgBouncerVersionSpec {
  // Version
  optional string version = 1;

  // Database Image
  optional PgBouncerServerVersion server = 2;

  // Exporter Image
  optional PgBouncerVersionExporter exporter = 3;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 4;
}

// PostgresSecurityContext is the additional features for the Postgres
message PostgresSecurityContext {
  // RunAsUser is default UID for the DB container. It is by default 999 for debian based image and 70 for alpine based image.
  // postgres UID 999 for debian images https://github.com/docker-library/postgres/blob/14f13e4b399ed1848fa24c2c1f5bd40c25732bdd/13/Dockerfile#L15
  // postgres UID 70  for alpine images https://github.com/docker-library/postgres/blob/14f13e4b399ed1848fa24c2c1f5bd40c25732bdd/13/alpine/Dockerfile#L6
  optional int64 runAsUser = 1;

  // RunAsAnyNonRoot will be true if user can change the default db container user to other than postgres user.
  // It will be always false for alpine images https://hub.docker.com/_/postgres/ # section : Arbitrary --user Notes
  optional bool runAsAnyNonRoot = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=postgresversions,singular=postgresversion,scope=Cluster,shortName=pgversion,categories={datastore,kubedb,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Distribution",type="string",JSONPath=".spec.distribution"
// +kubebuilder:printcolumn:name="DB_IMAGE",type="string",JSONPath=".spec.db.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PostgresVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PostgresVersionSpec spec = 2;
}

// PostgresVersionCoordinator is the Postgres leader elector image
message PostgresVersionCoordinator {
  optional string image = 1;
}

// PostgresVersionDatabase is the Postgres Database image
message PostgresVersionDatabase {
  optional string image = 1;
}

// PostgresVersionExporter is the image for the Postgres exporter
message PostgresVersionExporter {
  optional string image = 1;
}

// PostgresVersionInitContainer is the Postgres init container image
message PostgresVersionInitContainer {
  optional string image = 1;
}

// PostgresVersionList is a list of PostgresVersions
message PostgresVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PostgresVersion CRD objects
  repeated PostgresVersion items = 2;
}

// PostgresVersionPodSecurityPolicy is the Postgres pod security policies
message PostgresVersionPodSecurityPolicy {
  optional string databasePolicyName = 1;
}

// PostgresVersionSpec is the spec for postgres version
message PostgresVersionSpec {
  // Version
  optional string version = 1;

  // Distribution
  optional string distribution = 2;

  // init container image
  optional PostgresVersionInitContainer initContainer = 3;

  // Database Image
  optional PostgresVersionDatabase db = 4;

  // Exporter Image
  optional PostgresVersionExporter exporter = 5;

  // Coordinator Image
  optional PostgresVersionCoordinator coordinator = 6;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 7;

  // PSP names
  optional PostgresVersionPodSecurityPolicy podSecurityPolicies = 8;

  // Stash defines backup and restore task definitions.
  // +optional
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.StashAddonSpec stash = 9;

  // SecurityContext is for the additional config for postgres DB container
  // +optional
  optional PostgresSecurityContext securityContext = 10;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=proxysqlversions,singular=proxysqlversion,scope=Cluster,categories={datastore,kubedb,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="ProxySQL_IMAGE",type="string",JSONPath=".spec.db.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message ProxySQLVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ProxySQLVersionSpec spec = 2;
}

// ProxySQLVersionExporter is the image for the ProxySQL exporter
message ProxySQLVersionExporter {
  optional string image = 1;
}

// ProxySQLVersionList is a list of ProxySQLVersions
message ProxySQLVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of ProxySQLVersion CRD objects
  repeated ProxySQLVersion items = 2;
}

// ProxySQLVersionPodSecurityPolicy is the ProxySQL pod security policies
message ProxySQLVersionPodSecurityPolicy {
  optional string databasePolicyName = 1;
}

// ProxySQLVersionProxysql is the proxysql image
message ProxySQLVersionProxysql {
  optional string image = 1;
}

// ProxySQLVersionSpec is the spec for ProxySQL version
message ProxySQLVersionSpec {
  // Version
  optional string version = 1;

  // Proxysql Image
  optional ProxySQLVersionProxysql proxysql = 2;

  // Exporter Image
  optional ProxySQLVersionExporter exporter = 3;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 4;

  // PSP names
  optional ProxySQLVersionPodSecurityPolicy podSecurityPolicies = 5;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=redisversions,singular=redisversion,scope=Cluster,shortName=rdversion,categories={datastore,kubedb,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="DB_IMAGE",type="string",JSONPath=".spec.db.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message RedisVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RedisVersionSpec spec = 2;
}

// RedisVersionCoordinator is the Redis coordinator image
message RedisVersionCoordinator {
  optional string image = 1;
}

// RedisVersionDatabase is the Redis Database image
message RedisVersionDatabase {
  optional string image = 1;
}

// RedisVersionExporter is the image for the Redis exporter
message RedisVersionExporter {
  optional string image = 1;
}

// RedisVersionInitContainer is the Redis init container image
message RedisVersionInitContainer {
  optional string image = 1;
}

// RedisVersionList is a list of RedisVersions
message RedisVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of RedisVersion CRD objects
  repeated RedisVersion items = 2;
}

// RedisVersionPodSecurityPolicy is the Redis pod security policies
message RedisVersionPodSecurityPolicy {
  optional string databasePolicyName = 1;
}

// RedisVersionSpec is the spec for redis version
message RedisVersionSpec {
  // Version
  optional string version = 1;

  // init container image
  optional RedisVersionInitContainer initContainer = 2;

  // Database Image
  optional RedisVersionDatabase db = 3;

  // Exporter Image
  optional RedisVersionExporter exporter = 4;

  // Coordinator Image
  optional RedisVersionCoordinator coordinator = 5;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 6;

  // PSP names
  optional RedisVersionPodSecurityPolicy podSecurityPolicies = 7;

  // Stash defines backup and restore task definitions.
  // +optional
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.StashAddonSpec stash = 8;
}

// ReplicationModeDetector is the image for the MySQL replication mode detector
message ReplicationModeDetector {
  optional string image = 1;
}

